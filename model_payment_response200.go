/*
Pipedrive API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PaymentResponse200 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentResponse200{}

// PaymentResponse200 struct for PaymentResponse200
type PaymentResponse200 struct {
	// If the response is successful or not
	Success *bool `json:"success,omitempty"`
	Data []PaymentResponse200AllOfDataInner `json:"data,omitempty"`
}

// NewPaymentResponse200 instantiates a new PaymentResponse200 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentResponse200() *PaymentResponse200 {
	this := PaymentResponse200{}
	return &this
}

// NewPaymentResponse200WithDefaults instantiates a new PaymentResponse200 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentResponse200WithDefaults() *PaymentResponse200 {
	this := PaymentResponse200{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *PaymentResponse200) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse200) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *PaymentResponse200) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *PaymentResponse200) SetSuccess(v bool) {
	o.Success = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *PaymentResponse200) GetData() []PaymentResponse200AllOfDataInner {
	if o == nil || IsNil(o.Data) {
		var ret []PaymentResponse200AllOfDataInner
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentResponse200) GetDataOk() ([]PaymentResponse200AllOfDataInner, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *PaymentResponse200) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []PaymentResponse200AllOfDataInner and assigns it to the Data field.
func (o *PaymentResponse200) SetData(v []PaymentResponse200AllOfDataInner) {
	o.Data = v
}

func (o PaymentResponse200) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentResponse200) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullablePaymentResponse200 struct {
	value *PaymentResponse200
	isSet bool
}

func (v NullablePaymentResponse200) Get() *PaymentResponse200 {
	return v.value
}

func (v *NullablePaymentResponse200) Set(val *PaymentResponse200) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentResponse200) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentResponse200) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentResponse200(val *PaymentResponse200) *NullablePaymentResponse200 {
	return &NullablePaymentResponse200{value: val, isSet: true}
}

func (v NullablePaymentResponse200) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentResponse200) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


