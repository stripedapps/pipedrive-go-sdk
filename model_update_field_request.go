/*
Pipedrive API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateFieldRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateFieldRequest{}

// UpdateFieldRequest struct for UpdateFieldRequest
type UpdateFieldRequest struct {
	// The name of the field
	Name *string `json:"name,omitempty"`
	// When `field_type` is either set or enum, possible options must be supplied as a JSON-encoded sequential array of objects. All active items must be supplied and already existing items must have their ID supplied. New items only require a label. Example: `[{\"id\":123,\"label\":\"Existing Item\"},{\"label\":\"New Item\"}]`
	Options *string `json:"options,omitempty"`
	// Whether the field is available in 'add new' modal or not (both in web and mobile app)
	AddVisibleFlag *bool `json:"add_visible_flag,omitempty"`
}

// NewUpdateFieldRequest instantiates a new UpdateFieldRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateFieldRequest() *UpdateFieldRequest {
	this := UpdateFieldRequest{}
	var addVisibleFlag bool = true
	this.AddVisibleFlag = &addVisibleFlag
	return &this
}

// NewUpdateFieldRequestWithDefaults instantiates a new UpdateFieldRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateFieldRequestWithDefaults() *UpdateFieldRequest {
	this := UpdateFieldRequest{}
	var addVisibleFlag bool = true
	this.AddVisibleFlag = &addVisibleFlag
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateFieldRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFieldRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateFieldRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateFieldRequest) SetName(v string) {
	o.Name = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *UpdateFieldRequest) GetOptions() string {
	if o == nil || IsNil(o.Options) {
		var ret string
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFieldRequest) GetOptionsOk() (*string, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *UpdateFieldRequest) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given string and assigns it to the Options field.
func (o *UpdateFieldRequest) SetOptions(v string) {
	o.Options = &v
}

// GetAddVisibleFlag returns the AddVisibleFlag field value if set, zero value otherwise.
func (o *UpdateFieldRequest) GetAddVisibleFlag() bool {
	if o == nil || IsNil(o.AddVisibleFlag) {
		var ret bool
		return ret
	}
	return *o.AddVisibleFlag
}

// GetAddVisibleFlagOk returns a tuple with the AddVisibleFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFieldRequest) GetAddVisibleFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.AddVisibleFlag) {
		return nil, false
	}
	return o.AddVisibleFlag, true
}

// HasAddVisibleFlag returns a boolean if a field has been set.
func (o *UpdateFieldRequest) HasAddVisibleFlag() bool {
	if o != nil && !IsNil(o.AddVisibleFlag) {
		return true
	}

	return false
}

// SetAddVisibleFlag gets a reference to the given bool and assigns it to the AddVisibleFlag field.
func (o *UpdateFieldRequest) SetAddVisibleFlag(v bool) {
	o.AddVisibleFlag = &v
}

func (o UpdateFieldRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateFieldRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.AddVisibleFlag) {
		toSerialize["add_visible_flag"] = o.AddVisibleFlag
	}
	return toSerialize, nil
}

type NullableUpdateFieldRequest struct {
	value *UpdateFieldRequest
	isSet bool
}

func (v NullableUpdateFieldRequest) Get() *UpdateFieldRequest {
	return v.value
}

func (v *NullableUpdateFieldRequest) Set(val *UpdateFieldRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateFieldRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateFieldRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateFieldRequest(val *UpdateFieldRequest) *NullableUpdateFieldRequest {
	return &NullableUpdateFieldRequest{value: val, isSet: true}
}

func (v NullableUpdateFieldRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateFieldRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


