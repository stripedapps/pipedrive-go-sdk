/*
Pipedrive API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateProductFieldResponse200 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateProductFieldResponse200{}

// UpdateProductFieldResponse200 struct for UpdateProductFieldResponse200
type UpdateProductFieldResponse200 struct {
	// The name of the field
	Name *string `json:"name,omitempty"`
	// When `field_type` is either set or enum, possible options on update must be supplied as an array of objects each containing id and label, for example: [{\"id\":1, \"label\":\"red\"},{\"id\":2, \"label\":\"blue\"},{\"id\":3, \"label\":\"lilac\"}]
	Options []map[string]interface{} `json:"options,omitempty"`
}

// NewUpdateProductFieldResponse200 instantiates a new UpdateProductFieldResponse200 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateProductFieldResponse200() *UpdateProductFieldResponse200 {
	this := UpdateProductFieldResponse200{}
	return &this
}

// NewUpdateProductFieldResponse200WithDefaults instantiates a new UpdateProductFieldResponse200 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateProductFieldResponse200WithDefaults() *UpdateProductFieldResponse200 {
	this := UpdateProductFieldResponse200{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateProductFieldResponse200) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProductFieldResponse200) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateProductFieldResponse200) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateProductFieldResponse200) SetName(v string) {
	o.Name = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *UpdateProductFieldResponse200) GetOptions() []map[string]interface{} {
	if o == nil || IsNil(o.Options) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProductFieldResponse200) GetOptionsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *UpdateProductFieldResponse200) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []map[string]interface{} and assigns it to the Options field.
func (o *UpdateProductFieldResponse200) SetOptions(v []map[string]interface{}) {
	o.Options = v
}

func (o UpdateProductFieldResponse200) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateProductFieldResponse200) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

type NullableUpdateProductFieldResponse200 struct {
	value *UpdateProductFieldResponse200
	isSet bool
}

func (v NullableUpdateProductFieldResponse200) Get() *UpdateProductFieldResponse200 {
	return v.value
}

func (v *NullableUpdateProductFieldResponse200) Set(val *UpdateProductFieldResponse200) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateProductFieldResponse200) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateProductFieldResponse200) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateProductFieldResponse200(val *UpdateProductFieldResponse200) *NullableUpdateProductFieldResponse200 {
	return &NullableUpdateProductFieldResponse200{value: val, isSet: true}
}

func (v NullableUpdateProductFieldResponse200) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateProductFieldResponse200) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


