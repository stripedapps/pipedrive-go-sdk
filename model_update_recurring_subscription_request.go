/*
Pipedrive API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateRecurringSubscriptionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateRecurringSubscriptionRequest{}

// UpdateRecurringSubscriptionRequest struct for UpdateRecurringSubscriptionRequest
type UpdateRecurringSubscriptionRequest struct {
	// The description of the recurring subscription
	Description *string `json:"description,omitempty"`
	// The amount of each payment
	CycleAmount *int32 `json:"cycle_amount,omitempty"`
	// Array of additional payments. It requires a minimum structure as follows: [{ amount:SUM, description:DESCRIPTION, due_at:PAYMENT_DATE }]. Replace SUM with a payment amount, DESCRIPTION with an explanation string, PAYMENT_DATE with a date (format YYYY-MM-DD).
	Payments []map[string]interface{} `json:"payments,omitempty"`
	// Indicates that the deal value must be set to recurring subscription's MRR value
	UpdateDealValue *bool `json:"update_deal_value,omitempty"`
	// All payments after that date will be affected. Format: YYYY-MM-DD
	EffectiveDate string `json:"effective_date"`
}

// NewUpdateRecurringSubscriptionRequest instantiates a new UpdateRecurringSubscriptionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateRecurringSubscriptionRequest(effectiveDate string) *UpdateRecurringSubscriptionRequest {
	this := UpdateRecurringSubscriptionRequest{}
	this.EffectiveDate = effectiveDate
	return &this
}

// NewUpdateRecurringSubscriptionRequestWithDefaults instantiates a new UpdateRecurringSubscriptionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateRecurringSubscriptionRequestWithDefaults() *UpdateRecurringSubscriptionRequest {
	this := UpdateRecurringSubscriptionRequest{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateRecurringSubscriptionRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRecurringSubscriptionRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateRecurringSubscriptionRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateRecurringSubscriptionRequest) SetDescription(v string) {
	o.Description = &v
}

// GetCycleAmount returns the CycleAmount field value if set, zero value otherwise.
func (o *UpdateRecurringSubscriptionRequest) GetCycleAmount() int32 {
	if o == nil || IsNil(o.CycleAmount) {
		var ret int32
		return ret
	}
	return *o.CycleAmount
}

// GetCycleAmountOk returns a tuple with the CycleAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRecurringSubscriptionRequest) GetCycleAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.CycleAmount) {
		return nil, false
	}
	return o.CycleAmount, true
}

// HasCycleAmount returns a boolean if a field has been set.
func (o *UpdateRecurringSubscriptionRequest) HasCycleAmount() bool {
	if o != nil && !IsNil(o.CycleAmount) {
		return true
	}

	return false
}

// SetCycleAmount gets a reference to the given int32 and assigns it to the CycleAmount field.
func (o *UpdateRecurringSubscriptionRequest) SetCycleAmount(v int32) {
	o.CycleAmount = &v
}

// GetPayments returns the Payments field value if set, zero value otherwise.
func (o *UpdateRecurringSubscriptionRequest) GetPayments() []map[string]interface{} {
	if o == nil || IsNil(o.Payments) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Payments
}

// GetPaymentsOk returns a tuple with the Payments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRecurringSubscriptionRequest) GetPaymentsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Payments) {
		return nil, false
	}
	return o.Payments, true
}

// HasPayments returns a boolean if a field has been set.
func (o *UpdateRecurringSubscriptionRequest) HasPayments() bool {
	if o != nil && !IsNil(o.Payments) {
		return true
	}

	return false
}

// SetPayments gets a reference to the given []map[string]interface{} and assigns it to the Payments field.
func (o *UpdateRecurringSubscriptionRequest) SetPayments(v []map[string]interface{}) {
	o.Payments = v
}

// GetUpdateDealValue returns the UpdateDealValue field value if set, zero value otherwise.
func (o *UpdateRecurringSubscriptionRequest) GetUpdateDealValue() bool {
	if o == nil || IsNil(o.UpdateDealValue) {
		var ret bool
		return ret
	}
	return *o.UpdateDealValue
}

// GetUpdateDealValueOk returns a tuple with the UpdateDealValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRecurringSubscriptionRequest) GetUpdateDealValueOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateDealValue) {
		return nil, false
	}
	return o.UpdateDealValue, true
}

// HasUpdateDealValue returns a boolean if a field has been set.
func (o *UpdateRecurringSubscriptionRequest) HasUpdateDealValue() bool {
	if o != nil && !IsNil(o.UpdateDealValue) {
		return true
	}

	return false
}

// SetUpdateDealValue gets a reference to the given bool and assigns it to the UpdateDealValue field.
func (o *UpdateRecurringSubscriptionRequest) SetUpdateDealValue(v bool) {
	o.UpdateDealValue = &v
}

// GetEffectiveDate returns the EffectiveDate field value
func (o *UpdateRecurringSubscriptionRequest) GetEffectiveDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EffectiveDate
}

// GetEffectiveDateOk returns a tuple with the EffectiveDate field value
// and a boolean to check if the value has been set.
func (o *UpdateRecurringSubscriptionRequest) GetEffectiveDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EffectiveDate, true
}

// SetEffectiveDate sets field value
func (o *UpdateRecurringSubscriptionRequest) SetEffectiveDate(v string) {
	o.EffectiveDate = v
}

func (o UpdateRecurringSubscriptionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateRecurringSubscriptionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.CycleAmount) {
		toSerialize["cycle_amount"] = o.CycleAmount
	}
	if !IsNil(o.Payments) {
		toSerialize["payments"] = o.Payments
	}
	if !IsNil(o.UpdateDealValue) {
		toSerialize["update_deal_value"] = o.UpdateDealValue
	}
	toSerialize["effective_date"] = o.EffectiveDate
	return toSerialize, nil
}

type NullableUpdateRecurringSubscriptionRequest struct {
	value *UpdateRecurringSubscriptionRequest
	isSet bool
}

func (v NullableUpdateRecurringSubscriptionRequest) Get() *UpdateRecurringSubscriptionRequest {
	return v.value
}

func (v *NullableUpdateRecurringSubscriptionRequest) Set(val *UpdateRecurringSubscriptionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRecurringSubscriptionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRecurringSubscriptionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRecurringSubscriptionRequest(val *UpdateRecurringSubscriptionRequest) *NullableUpdateRecurringSubscriptionRequest {
	return &NullableUpdateRecurringSubscriptionRequest{value: val, isSet: true}
}

func (v NullableUpdateRecurringSubscriptionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRecurringSubscriptionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


