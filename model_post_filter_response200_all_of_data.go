/*
Pipedrive API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PostFilterResponse200AllOfData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostFilterResponse200AllOfData{}

// PostFilterResponse200AllOfData struct for PostFilterResponse200AllOfData
type PostFilterResponse200AllOfData struct {
	// The ID of the created filter
	Id *int32 `json:"id,omitempty"`
	// The name of the created filter
	Name *string `json:"name,omitempty"`
	// The activity flag of the created filter
	ActiveFlag *bool `json:"active_flag,omitempty"`
	Type *string `json:"type,omitempty"`
	// If the created filter is temporary or not
	TemporaryFlag *bool `json:"temporary_flag,omitempty"`
	// The user ID of the created filter
	UserId *int32 `json:"user_id,omitempty"`
	// The add time of the created filter
	AddTime *string `json:"add_time,omitempty"`
	// The update time of the created filter
	UpdateTime *string `json:"update_time,omitempty"`
	// The visibility group ID of the created filter
	VisibleTo *int32 `json:"visible_to,omitempty"`
	// The custom view ID of the created filter
	CustomViewId *int32 `json:"custom_view_id,omitempty"`
	// The created filter conditions object
	Conditions map[string]interface{} `json:"conditions,omitempty"`
}

// NewPostFilterResponse200AllOfData instantiates a new PostFilterResponse200AllOfData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostFilterResponse200AllOfData() *PostFilterResponse200AllOfData {
	this := PostFilterResponse200AllOfData{}
	return &this
}

// NewPostFilterResponse200AllOfDataWithDefaults instantiates a new PostFilterResponse200AllOfData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostFilterResponse200AllOfDataWithDefaults() *PostFilterResponse200AllOfData {
	this := PostFilterResponse200AllOfData{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PostFilterResponse200AllOfData) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostFilterResponse200AllOfData) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PostFilterResponse200AllOfData) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PostFilterResponse200AllOfData) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PostFilterResponse200AllOfData) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostFilterResponse200AllOfData) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PostFilterResponse200AllOfData) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PostFilterResponse200AllOfData) SetName(v string) {
	o.Name = &v
}

// GetActiveFlag returns the ActiveFlag field value if set, zero value otherwise.
func (o *PostFilterResponse200AllOfData) GetActiveFlag() bool {
	if o == nil || IsNil(o.ActiveFlag) {
		var ret bool
		return ret
	}
	return *o.ActiveFlag
}

// GetActiveFlagOk returns a tuple with the ActiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostFilterResponse200AllOfData) GetActiveFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.ActiveFlag) {
		return nil, false
	}
	return o.ActiveFlag, true
}

// HasActiveFlag returns a boolean if a field has been set.
func (o *PostFilterResponse200AllOfData) HasActiveFlag() bool {
	if o != nil && !IsNil(o.ActiveFlag) {
		return true
	}

	return false
}

// SetActiveFlag gets a reference to the given bool and assigns it to the ActiveFlag field.
func (o *PostFilterResponse200AllOfData) SetActiveFlag(v bool) {
	o.ActiveFlag = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PostFilterResponse200AllOfData) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostFilterResponse200AllOfData) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PostFilterResponse200AllOfData) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PostFilterResponse200AllOfData) SetType(v string) {
	o.Type = &v
}

// GetTemporaryFlag returns the TemporaryFlag field value if set, zero value otherwise.
func (o *PostFilterResponse200AllOfData) GetTemporaryFlag() bool {
	if o == nil || IsNil(o.TemporaryFlag) {
		var ret bool
		return ret
	}
	return *o.TemporaryFlag
}

// GetTemporaryFlagOk returns a tuple with the TemporaryFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostFilterResponse200AllOfData) GetTemporaryFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.TemporaryFlag) {
		return nil, false
	}
	return o.TemporaryFlag, true
}

// HasTemporaryFlag returns a boolean if a field has been set.
func (o *PostFilterResponse200AllOfData) HasTemporaryFlag() bool {
	if o != nil && !IsNil(o.TemporaryFlag) {
		return true
	}

	return false
}

// SetTemporaryFlag gets a reference to the given bool and assigns it to the TemporaryFlag field.
func (o *PostFilterResponse200AllOfData) SetTemporaryFlag(v bool) {
	o.TemporaryFlag = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *PostFilterResponse200AllOfData) GetUserId() int32 {
	if o == nil || IsNil(o.UserId) {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostFilterResponse200AllOfData) GetUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *PostFilterResponse200AllOfData) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *PostFilterResponse200AllOfData) SetUserId(v int32) {
	o.UserId = &v
}

// GetAddTime returns the AddTime field value if set, zero value otherwise.
func (o *PostFilterResponse200AllOfData) GetAddTime() string {
	if o == nil || IsNil(o.AddTime) {
		var ret string
		return ret
	}
	return *o.AddTime
}

// GetAddTimeOk returns a tuple with the AddTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostFilterResponse200AllOfData) GetAddTimeOk() (*string, bool) {
	if o == nil || IsNil(o.AddTime) {
		return nil, false
	}
	return o.AddTime, true
}

// HasAddTime returns a boolean if a field has been set.
func (o *PostFilterResponse200AllOfData) HasAddTime() bool {
	if o != nil && !IsNil(o.AddTime) {
		return true
	}

	return false
}

// SetAddTime gets a reference to the given string and assigns it to the AddTime field.
func (o *PostFilterResponse200AllOfData) SetAddTime(v string) {
	o.AddTime = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *PostFilterResponse200AllOfData) GetUpdateTime() string {
	if o == nil || IsNil(o.UpdateTime) {
		var ret string
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostFilterResponse200AllOfData) GetUpdateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateTime) {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *PostFilterResponse200AllOfData) HasUpdateTime() bool {
	if o != nil && !IsNil(o.UpdateTime) {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given string and assigns it to the UpdateTime field.
func (o *PostFilterResponse200AllOfData) SetUpdateTime(v string) {
	o.UpdateTime = &v
}

// GetVisibleTo returns the VisibleTo field value if set, zero value otherwise.
func (o *PostFilterResponse200AllOfData) GetVisibleTo() int32 {
	if o == nil || IsNil(o.VisibleTo) {
		var ret int32
		return ret
	}
	return *o.VisibleTo
}

// GetVisibleToOk returns a tuple with the VisibleTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostFilterResponse200AllOfData) GetVisibleToOk() (*int32, bool) {
	if o == nil || IsNil(o.VisibleTo) {
		return nil, false
	}
	return o.VisibleTo, true
}

// HasVisibleTo returns a boolean if a field has been set.
func (o *PostFilterResponse200AllOfData) HasVisibleTo() bool {
	if o != nil && !IsNil(o.VisibleTo) {
		return true
	}

	return false
}

// SetVisibleTo gets a reference to the given int32 and assigns it to the VisibleTo field.
func (o *PostFilterResponse200AllOfData) SetVisibleTo(v int32) {
	o.VisibleTo = &v
}

// GetCustomViewId returns the CustomViewId field value if set, zero value otherwise.
func (o *PostFilterResponse200AllOfData) GetCustomViewId() int32 {
	if o == nil || IsNil(o.CustomViewId) {
		var ret int32
		return ret
	}
	return *o.CustomViewId
}

// GetCustomViewIdOk returns a tuple with the CustomViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostFilterResponse200AllOfData) GetCustomViewIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CustomViewId) {
		return nil, false
	}
	return o.CustomViewId, true
}

// HasCustomViewId returns a boolean if a field has been set.
func (o *PostFilterResponse200AllOfData) HasCustomViewId() bool {
	if o != nil && !IsNil(o.CustomViewId) {
		return true
	}

	return false
}

// SetCustomViewId gets a reference to the given int32 and assigns it to the CustomViewId field.
func (o *PostFilterResponse200AllOfData) SetCustomViewId(v int32) {
	o.CustomViewId = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *PostFilterResponse200AllOfData) GetConditions() map[string]interface{} {
	if o == nil || IsNil(o.Conditions) {
		var ret map[string]interface{}
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostFilterResponse200AllOfData) GetConditionsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Conditions) {
		return map[string]interface{}{}, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *PostFilterResponse200AllOfData) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given map[string]interface{} and assigns it to the Conditions field.
func (o *PostFilterResponse200AllOfData) SetConditions(v map[string]interface{}) {
	o.Conditions = v
}

func (o PostFilterResponse200AllOfData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostFilterResponse200AllOfData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ActiveFlag) {
		toSerialize["active_flag"] = o.ActiveFlag
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.TemporaryFlag) {
		toSerialize["temporary_flag"] = o.TemporaryFlag
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.AddTime) {
		toSerialize["add_time"] = o.AddTime
	}
	if !IsNil(o.UpdateTime) {
		toSerialize["update_time"] = o.UpdateTime
	}
	if !IsNil(o.VisibleTo) {
		toSerialize["visible_to"] = o.VisibleTo
	}
	if !IsNil(o.CustomViewId) {
		toSerialize["custom_view_id"] = o.CustomViewId
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	return toSerialize, nil
}

type NullablePostFilterResponse200AllOfData struct {
	value *PostFilterResponse200AllOfData
	isSet bool
}

func (v NullablePostFilterResponse200AllOfData) Get() *PostFilterResponse200AllOfData {
	return v.value
}

func (v *NullablePostFilterResponse200AllOfData) Set(val *PostFilterResponse200AllOfData) {
	v.value = val
	v.isSet = true
}

func (v NullablePostFilterResponse200AllOfData) IsSet() bool {
	return v.isSet
}

func (v *NullablePostFilterResponse200AllOfData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostFilterResponse200AllOfData(val *PostFilterResponse200AllOfData) *NullablePostFilterResponse200AllOfData {
	return &NullablePostFilterResponse200AllOfData{value: val, isSet: true}
}

func (v NullablePostFilterResponse200AllOfData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostFilterResponse200AllOfData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


