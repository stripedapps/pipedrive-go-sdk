/*
Pipedrive API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateTeamRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateTeamRequest{}

// UpdateTeamRequest struct for UpdateTeamRequest
type UpdateTeamRequest struct {
	// The team name
	Name *string `json:"name,omitempty"`
	// The team description
	Description *string `json:"description,omitempty"`
	// The team manager ID
	ManagerId *int32 `json:"manager_id,omitempty"`
	// The list of user IDs
	Users []int32 `json:"users,omitempty"`
	ActiveFlag *float32 `json:"active_flag,omitempty"`
	DeletedFlag *float32 `json:"deleted_flag,omitempty"`
}

// NewUpdateTeamRequest instantiates a new UpdateTeamRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateTeamRequest() *UpdateTeamRequest {
	this := UpdateTeamRequest{}
	return &this
}

// NewUpdateTeamRequestWithDefaults instantiates a new UpdateTeamRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateTeamRequestWithDefaults() *UpdateTeamRequest {
	this := UpdateTeamRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateTeamRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTeamRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateTeamRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateTeamRequest) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateTeamRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTeamRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateTeamRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateTeamRequest) SetDescription(v string) {
	o.Description = &v
}

// GetManagerId returns the ManagerId field value if set, zero value otherwise.
func (o *UpdateTeamRequest) GetManagerId() int32 {
	if o == nil || IsNil(o.ManagerId) {
		var ret int32
		return ret
	}
	return *o.ManagerId
}

// GetManagerIdOk returns a tuple with the ManagerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTeamRequest) GetManagerIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ManagerId) {
		return nil, false
	}
	return o.ManagerId, true
}

// HasManagerId returns a boolean if a field has been set.
func (o *UpdateTeamRequest) HasManagerId() bool {
	if o != nil && !IsNil(o.ManagerId) {
		return true
	}

	return false
}

// SetManagerId gets a reference to the given int32 and assigns it to the ManagerId field.
func (o *UpdateTeamRequest) SetManagerId(v int32) {
	o.ManagerId = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *UpdateTeamRequest) GetUsers() []int32 {
	if o == nil || IsNil(o.Users) {
		var ret []int32
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTeamRequest) GetUsersOk() ([]int32, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *UpdateTeamRequest) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []int32 and assigns it to the Users field.
func (o *UpdateTeamRequest) SetUsers(v []int32) {
	o.Users = v
}

// GetActiveFlag returns the ActiveFlag field value if set, zero value otherwise.
func (o *UpdateTeamRequest) GetActiveFlag() float32 {
	if o == nil || IsNil(o.ActiveFlag) {
		var ret float32
		return ret
	}
	return *o.ActiveFlag
}

// GetActiveFlagOk returns a tuple with the ActiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTeamRequest) GetActiveFlagOk() (*float32, bool) {
	if o == nil || IsNil(o.ActiveFlag) {
		return nil, false
	}
	return o.ActiveFlag, true
}

// HasActiveFlag returns a boolean if a field has been set.
func (o *UpdateTeamRequest) HasActiveFlag() bool {
	if o != nil && !IsNil(o.ActiveFlag) {
		return true
	}

	return false
}

// SetActiveFlag gets a reference to the given float32 and assigns it to the ActiveFlag field.
func (o *UpdateTeamRequest) SetActiveFlag(v float32) {
	o.ActiveFlag = &v
}

// GetDeletedFlag returns the DeletedFlag field value if set, zero value otherwise.
func (o *UpdateTeamRequest) GetDeletedFlag() float32 {
	if o == nil || IsNil(o.DeletedFlag) {
		var ret float32
		return ret
	}
	return *o.DeletedFlag
}

// GetDeletedFlagOk returns a tuple with the DeletedFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTeamRequest) GetDeletedFlagOk() (*float32, bool) {
	if o == nil || IsNil(o.DeletedFlag) {
		return nil, false
	}
	return o.DeletedFlag, true
}

// HasDeletedFlag returns a boolean if a field has been set.
func (o *UpdateTeamRequest) HasDeletedFlag() bool {
	if o != nil && !IsNil(o.DeletedFlag) {
		return true
	}

	return false
}

// SetDeletedFlag gets a reference to the given float32 and assigns it to the DeletedFlag field.
func (o *UpdateTeamRequest) SetDeletedFlag(v float32) {
	o.DeletedFlag = &v
}

func (o UpdateTeamRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateTeamRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ManagerId) {
		toSerialize["manager_id"] = o.ManagerId
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	if !IsNil(o.ActiveFlag) {
		toSerialize["active_flag"] = o.ActiveFlag
	}
	if !IsNil(o.DeletedFlag) {
		toSerialize["deleted_flag"] = o.DeletedFlag
	}
	return toSerialize, nil
}

type NullableUpdateTeamRequest struct {
	value *UpdateTeamRequest
	isSet bool
}

func (v NullableUpdateTeamRequest) Get() *UpdateTeamRequest {
	return v.value
}

func (v *NullableUpdateTeamRequest) Set(val *UpdateTeamRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateTeamRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateTeamRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateTeamRequest(val *UpdateTeamRequest) *NullableUpdateTeamRequest {
	return &NullableUpdateTeamRequest{value: val, isSet: true}
}

func (v NullableUpdateTeamRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateTeamRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


