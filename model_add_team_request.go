/*
Pipedrive API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AddTeamRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddTeamRequest{}

// AddTeamRequest struct for AddTeamRequest
type AddTeamRequest struct {
	// The team name
	Name string `json:"name"`
	// The team description
	Description *string `json:"description,omitempty"`
	// The team manager ID
	ManagerId int32 `json:"manager_id"`
	// The list of user IDs
	Users []int32 `json:"users,omitempty"`
}

// NewAddTeamRequest instantiates a new AddTeamRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddTeamRequest(name string, managerId int32) *AddTeamRequest {
	this := AddTeamRequest{}
	this.Name = name
	this.ManagerId = managerId
	return &this
}

// NewAddTeamRequestWithDefaults instantiates a new AddTeamRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddTeamRequestWithDefaults() *AddTeamRequest {
	this := AddTeamRequest{}
	return &this
}

// GetName returns the Name field value
func (o *AddTeamRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AddTeamRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AddTeamRequest) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddTeamRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddTeamRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddTeamRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddTeamRequest) SetDescription(v string) {
	o.Description = &v
}

// GetManagerId returns the ManagerId field value
func (o *AddTeamRequest) GetManagerId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ManagerId
}

// GetManagerIdOk returns a tuple with the ManagerId field value
// and a boolean to check if the value has been set.
func (o *AddTeamRequest) GetManagerIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ManagerId, true
}

// SetManagerId sets field value
func (o *AddTeamRequest) SetManagerId(v int32) {
	o.ManagerId = v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *AddTeamRequest) GetUsers() []int32 {
	if o == nil || IsNil(o.Users) {
		var ret []int32
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddTeamRequest) GetUsersOk() ([]int32, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *AddTeamRequest) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []int32 and assigns it to the Users field.
func (o *AddTeamRequest) SetUsers(v []int32) {
	o.Users = v
}

func (o AddTeamRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddTeamRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["manager_id"] = o.ManagerId
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	return toSerialize, nil
}

type NullableAddTeamRequest struct {
	value *AddTeamRequest
	isSet bool
}

func (v NullableAddTeamRequest) Get() *AddTeamRequest {
	return v.value
}

func (v *NullableAddTeamRequest) Set(val *AddTeamRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddTeamRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddTeamRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddTeamRequest(val *AddTeamRequest) *NullableAddTeamRequest {
	return &NullableAddTeamRequest{value: val, isSet: true}
}

func (v NullableAddTeamRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddTeamRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


