/*
Pipedrive API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetNoteFieldsResponse200AllOfDataInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetNoteFieldsResponse200AllOfDataInner{}

// GetNoteFieldsResponse200AllOfDataInner struct for GetNoteFieldsResponse200AllOfDataInner
type GetNoteFieldsResponse200AllOfDataInner struct {
	// The ID of the field
	Id *int32 `json:"id,omitempty"`
	// The key of the field
	Key *string `json:"key,omitempty"`
	// The name of the field
	Name *string `json:"name,omitempty"`
	// The type of the field<table><tr><th>Value</th><th>Description</th></tr><tr><td>`address`</td><td>Address field (has multiple subfields, autocompleted by Google Maps)</td></tr><tr><td>`date`</td><td>Date (format YYYY-MM-DD)</td></tr><tr><td>`daterange`</td><td>Date-range field (has a start date and end date value, both YYYY-MM-DD)</td></tr><tr><td>`double`</td><td>Numeric value</td></tr><tr><td>`enum`</td><td>Options field with a single possible chosen option</td></tr><tr></tr><tr><td>`monetary`</td><td>Monetary field (has a numeric value and a currency value)</td></tr><tr><td>`org`</td><td>Organization field (contains an organization ID which is stored on the same account)</td></tr><tr><td>`people`</td><td>Person field (contains a person ID which is stored on the same account)</td></tr><tr><td>`phone`</td><td>Phone field (up to 255 numbers and/or characters)</td></tr><tr><td>`set`</td><td>Options field with a possibility of having multiple chosen options</td></tr><tr><td>`text`</td><td>Long text (up to 65k characters)</td></tr><tr><td>`time`</td><td>Time field (format HH:MM:SS)</td></tr><tr><td>`timerange`</td><td>Time-range field (has a start time and end time value, both HH:MM:SS)</td></tr><tr><td>`user`</td><td>User field (contains a user ID of another Pipedrive user)</td></tr><tr><td>`varchar`</td><td>Text (up to 255 characters)</td></tr><tr><td>`varchar_auto`</td><td>Autocomplete text (up to 255 characters)</td></tr><tr><td>`visible_to`</td><td>System field that keeps item's visibility setting</td></tr></table>
	FieldType *string `json:"field_type,omitempty"`
	// The active flag of the field
	ActiveFlag *bool `json:"active_flag,omitempty"`
	// The edit flag of the field
	EditFlag *bool `json:"edit_flag,omitempty"`
	// Not used
	BulkEditAllowed *bool `json:"bulk_edit_allowed,omitempty"`
	// Whether or not the field is mandatory
	MandatoryFlag *bool `json:"mandatory_flag,omitempty"`
	// The options of the field. When there are no options, `null` is returned.
	Options []GetNoteFieldsResponse200AllOfDataInnerOptionsInner `json:"options,omitempty"`
}

// NewGetNoteFieldsResponse200AllOfDataInner instantiates a new GetNoteFieldsResponse200AllOfDataInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetNoteFieldsResponse200AllOfDataInner() *GetNoteFieldsResponse200AllOfDataInner {
	this := GetNoteFieldsResponse200AllOfDataInner{}
	return &this
}

// NewGetNoteFieldsResponse200AllOfDataInnerWithDefaults instantiates a new GetNoteFieldsResponse200AllOfDataInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetNoteFieldsResponse200AllOfDataInnerWithDefaults() *GetNoteFieldsResponse200AllOfDataInner {
	this := GetNoteFieldsResponse200AllOfDataInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetNoteFieldsResponse200AllOfDataInner) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetNoteFieldsResponse200AllOfDataInner) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetNoteFieldsResponse200AllOfDataInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *GetNoteFieldsResponse200AllOfDataInner) SetId(v int32) {
	o.Id = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *GetNoteFieldsResponse200AllOfDataInner) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetNoteFieldsResponse200AllOfDataInner) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *GetNoteFieldsResponse200AllOfDataInner) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *GetNoteFieldsResponse200AllOfDataInner) SetKey(v string) {
	o.Key = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GetNoteFieldsResponse200AllOfDataInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetNoteFieldsResponse200AllOfDataInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GetNoteFieldsResponse200AllOfDataInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GetNoteFieldsResponse200AllOfDataInner) SetName(v string) {
	o.Name = &v
}

// GetFieldType returns the FieldType field value if set, zero value otherwise.
func (o *GetNoteFieldsResponse200AllOfDataInner) GetFieldType() string {
	if o == nil || IsNil(o.FieldType) {
		var ret string
		return ret
	}
	return *o.FieldType
}

// GetFieldTypeOk returns a tuple with the FieldType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetNoteFieldsResponse200AllOfDataInner) GetFieldTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FieldType) {
		return nil, false
	}
	return o.FieldType, true
}

// HasFieldType returns a boolean if a field has been set.
func (o *GetNoteFieldsResponse200AllOfDataInner) HasFieldType() bool {
	if o != nil && !IsNil(o.FieldType) {
		return true
	}

	return false
}

// SetFieldType gets a reference to the given string and assigns it to the FieldType field.
func (o *GetNoteFieldsResponse200AllOfDataInner) SetFieldType(v string) {
	o.FieldType = &v
}

// GetActiveFlag returns the ActiveFlag field value if set, zero value otherwise.
func (o *GetNoteFieldsResponse200AllOfDataInner) GetActiveFlag() bool {
	if o == nil || IsNil(o.ActiveFlag) {
		var ret bool
		return ret
	}
	return *o.ActiveFlag
}

// GetActiveFlagOk returns a tuple with the ActiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetNoteFieldsResponse200AllOfDataInner) GetActiveFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.ActiveFlag) {
		return nil, false
	}
	return o.ActiveFlag, true
}

// HasActiveFlag returns a boolean if a field has been set.
func (o *GetNoteFieldsResponse200AllOfDataInner) HasActiveFlag() bool {
	if o != nil && !IsNil(o.ActiveFlag) {
		return true
	}

	return false
}

// SetActiveFlag gets a reference to the given bool and assigns it to the ActiveFlag field.
func (o *GetNoteFieldsResponse200AllOfDataInner) SetActiveFlag(v bool) {
	o.ActiveFlag = &v
}

// GetEditFlag returns the EditFlag field value if set, zero value otherwise.
func (o *GetNoteFieldsResponse200AllOfDataInner) GetEditFlag() bool {
	if o == nil || IsNil(o.EditFlag) {
		var ret bool
		return ret
	}
	return *o.EditFlag
}

// GetEditFlagOk returns a tuple with the EditFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetNoteFieldsResponse200AllOfDataInner) GetEditFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.EditFlag) {
		return nil, false
	}
	return o.EditFlag, true
}

// HasEditFlag returns a boolean if a field has been set.
func (o *GetNoteFieldsResponse200AllOfDataInner) HasEditFlag() bool {
	if o != nil && !IsNil(o.EditFlag) {
		return true
	}

	return false
}

// SetEditFlag gets a reference to the given bool and assigns it to the EditFlag field.
func (o *GetNoteFieldsResponse200AllOfDataInner) SetEditFlag(v bool) {
	o.EditFlag = &v
}

// GetBulkEditAllowed returns the BulkEditAllowed field value if set, zero value otherwise.
func (o *GetNoteFieldsResponse200AllOfDataInner) GetBulkEditAllowed() bool {
	if o == nil || IsNil(o.BulkEditAllowed) {
		var ret bool
		return ret
	}
	return *o.BulkEditAllowed
}

// GetBulkEditAllowedOk returns a tuple with the BulkEditAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetNoteFieldsResponse200AllOfDataInner) GetBulkEditAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.BulkEditAllowed) {
		return nil, false
	}
	return o.BulkEditAllowed, true
}

// HasBulkEditAllowed returns a boolean if a field has been set.
func (o *GetNoteFieldsResponse200AllOfDataInner) HasBulkEditAllowed() bool {
	if o != nil && !IsNil(o.BulkEditAllowed) {
		return true
	}

	return false
}

// SetBulkEditAllowed gets a reference to the given bool and assigns it to the BulkEditAllowed field.
func (o *GetNoteFieldsResponse200AllOfDataInner) SetBulkEditAllowed(v bool) {
	o.BulkEditAllowed = &v
}

// GetMandatoryFlag returns the MandatoryFlag field value if set, zero value otherwise.
func (o *GetNoteFieldsResponse200AllOfDataInner) GetMandatoryFlag() bool {
	if o == nil || IsNil(o.MandatoryFlag) {
		var ret bool
		return ret
	}
	return *o.MandatoryFlag
}

// GetMandatoryFlagOk returns a tuple with the MandatoryFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetNoteFieldsResponse200AllOfDataInner) GetMandatoryFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.MandatoryFlag) {
		return nil, false
	}
	return o.MandatoryFlag, true
}

// HasMandatoryFlag returns a boolean if a field has been set.
func (o *GetNoteFieldsResponse200AllOfDataInner) HasMandatoryFlag() bool {
	if o != nil && !IsNil(o.MandatoryFlag) {
		return true
	}

	return false
}

// SetMandatoryFlag gets a reference to the given bool and assigns it to the MandatoryFlag field.
func (o *GetNoteFieldsResponse200AllOfDataInner) SetMandatoryFlag(v bool) {
	o.MandatoryFlag = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *GetNoteFieldsResponse200AllOfDataInner) GetOptions() []GetNoteFieldsResponse200AllOfDataInnerOptionsInner {
	if o == nil || IsNil(o.Options) {
		var ret []GetNoteFieldsResponse200AllOfDataInnerOptionsInner
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetNoteFieldsResponse200AllOfDataInner) GetOptionsOk() ([]GetNoteFieldsResponse200AllOfDataInnerOptionsInner, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *GetNoteFieldsResponse200AllOfDataInner) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []GetNoteFieldsResponse200AllOfDataInnerOptionsInner and assigns it to the Options field.
func (o *GetNoteFieldsResponse200AllOfDataInner) SetOptions(v []GetNoteFieldsResponse200AllOfDataInnerOptionsInner) {
	o.Options = v
}

func (o GetNoteFieldsResponse200AllOfDataInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetNoteFieldsResponse200AllOfDataInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.FieldType) {
		toSerialize["field_type"] = o.FieldType
	}
	if !IsNil(o.ActiveFlag) {
		toSerialize["active_flag"] = o.ActiveFlag
	}
	if !IsNil(o.EditFlag) {
		toSerialize["edit_flag"] = o.EditFlag
	}
	if !IsNil(o.BulkEditAllowed) {
		toSerialize["bulk_edit_allowed"] = o.BulkEditAllowed
	}
	if !IsNil(o.MandatoryFlag) {
		toSerialize["mandatory_flag"] = o.MandatoryFlag
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

type NullableGetNoteFieldsResponse200AllOfDataInner struct {
	value *GetNoteFieldsResponse200AllOfDataInner
	isSet bool
}

func (v NullableGetNoteFieldsResponse200AllOfDataInner) Get() *GetNoteFieldsResponse200AllOfDataInner {
	return v.value
}

func (v *NullableGetNoteFieldsResponse200AllOfDataInner) Set(val *GetNoteFieldsResponse200AllOfDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetNoteFieldsResponse200AllOfDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetNoteFieldsResponse200AllOfDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetNoteFieldsResponse200AllOfDataInner(val *GetNoteFieldsResponse200AllOfDataInner) *NullableGetNoteFieldsResponse200AllOfDataInner {
	return &NullableGetNoteFieldsResponse200AllOfDataInner{value: val, isSet: true}
}

func (v NullableGetNoteFieldsResponse200AllOfDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetNoteFieldsResponse200AllOfDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


