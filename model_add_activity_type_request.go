/*
Pipedrive API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddActivityTypeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddActivityTypeRequest{}

// AddActivityTypeRequest struct for AddActivityTypeRequest
type AddActivityTypeRequest struct {
	// The name of the activity type
	Name string `json:"name"`
	// Icon graphic to use for representing this activity type
	IconKey string `json:"icon_key"`
	// A designated color for the activity type in 6-character HEX format (e.g. `FFFFFF` for white, `000000` for black)
	Color *string `json:"color,omitempty"`
}

type _AddActivityTypeRequest AddActivityTypeRequest

// NewAddActivityTypeRequest instantiates a new AddActivityTypeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddActivityTypeRequest(name string, iconKey string) *AddActivityTypeRequest {
	this := AddActivityTypeRequest{}
	this.Name = name
	this.IconKey = iconKey
	return &this
}

// NewAddActivityTypeRequestWithDefaults instantiates a new AddActivityTypeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddActivityTypeRequestWithDefaults() *AddActivityTypeRequest {
	this := AddActivityTypeRequest{}
	return &this
}

// GetName returns the Name field value
func (o *AddActivityTypeRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AddActivityTypeRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AddActivityTypeRequest) SetName(v string) {
	o.Name = v
}

// GetIconKey returns the IconKey field value
func (o *AddActivityTypeRequest) GetIconKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IconKey
}

// GetIconKeyOk returns a tuple with the IconKey field value
// and a boolean to check if the value has been set.
func (o *AddActivityTypeRequest) GetIconKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IconKey, true
}

// SetIconKey sets field value
func (o *AddActivityTypeRequest) SetIconKey(v string) {
	o.IconKey = v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *AddActivityTypeRequest) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddActivityTypeRequest) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *AddActivityTypeRequest) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *AddActivityTypeRequest) SetColor(v string) {
	o.Color = &v
}

func (o AddActivityTypeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddActivityTypeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["icon_key"] = o.IconKey
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	return toSerialize, nil
}

func (o *AddActivityTypeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"icon_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddActivityTypeRequest := _AddActivityTypeRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddActivityTypeRequest)

	if err != nil {
		return err
	}

	*o = AddActivityTypeRequest(varAddActivityTypeRequest)

	return err
}

type NullableAddActivityTypeRequest struct {
	value *AddActivityTypeRequest
	isSet bool
}

func (v NullableAddActivityTypeRequest) Get() *AddActivityTypeRequest {
	return v.value
}

func (v *NullableAddActivityTypeRequest) Set(val *AddActivityTypeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddActivityTypeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddActivityTypeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddActivityTypeRequest(val *AddActivityTypeRequest) *NullableAddActivityTypeRequest {
	return &NullableAddActivityTypeRequest{value: val, isSet: true}
}

func (v NullableAddActivityTypeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddActivityTypeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


