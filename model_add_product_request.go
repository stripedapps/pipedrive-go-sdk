/*
Pipedrive API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddProductRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddProductRequest{}

// AddProductRequest struct for AddProductRequest
type AddProductRequest struct {
	// The name of the product
	Name string `json:"name"`
	// The product code
	Code *string `json:"code,omitempty"`
	// The unit in which this product is sold
	Unit *string `json:"unit,omitempty"`
	// The tax percentage
	Tax *float32 `json:"tax,omitempty"`
	// Whether this product will be made active or not
	ActiveFlag *bool `json:"active_flag,omitempty"`
	// Whether this product can be selected in deals or not
	Selectable *bool `json:"selectable,omitempty"`
	VisibleTo *string `json:"visible_to,omitempty"`
	// The ID of the user who will be marked as the owner of this product. When omitted, the authorized user ID will be used
	OwnerId *int32 `json:"owner_id,omitempty"`
	// An array of objects, each containing: `currency` (string), `price` (number), `cost` (number, optional), `overhead_cost` (number, optional). Note that there can only be one price per product per currency. When `prices` is omitted altogether, a default price of 0 and a default currency based on the company's currency will be assigned.
	Prices []map[string]interface{} `json:"prices,omitempty"`
	// Only available in Advanced and above plans  How often a customer is billed for access to a service or product 
	BillingFrequency *string `json:"billing_frequency,omitempty"`
	// Only available in Advanced and above plans  The number of times the billing frequency repeats for a product in a deal  When `billing_frequency` is set to `one-time`, this field must be `null`  For all the other values of `billing_frequency`, `null` represents a product billed indefinitely  Must be a positive integer less or equal to 312 
	BillingFrequencyCycles NullableInt32 `json:"billing_frequency_cycles,omitempty"`
}

type _AddProductRequest AddProductRequest

// NewAddProductRequest instantiates a new AddProductRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddProductRequest(name string) *AddProductRequest {
	this := AddProductRequest{}
	this.Name = name
	var tax float32 = 0
	this.Tax = &tax
	var activeFlag bool = true
	this.ActiveFlag = &activeFlag
	var selectable bool = true
	this.Selectable = &selectable
	var billingFrequency string = "one-time"
	this.BillingFrequency = &billingFrequency
	return &this
}

// NewAddProductRequestWithDefaults instantiates a new AddProductRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddProductRequestWithDefaults() *AddProductRequest {
	this := AddProductRequest{}
	var tax float32 = 0
	this.Tax = &tax
	var activeFlag bool = true
	this.ActiveFlag = &activeFlag
	var selectable bool = true
	this.Selectable = &selectable
	var billingFrequency string = "one-time"
	this.BillingFrequency = &billingFrequency
	return &this
}

// GetName returns the Name field value
func (o *AddProductRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AddProductRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AddProductRequest) SetName(v string) {
	o.Name = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *AddProductRequest) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddProductRequest) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *AddProductRequest) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *AddProductRequest) SetCode(v string) {
	o.Code = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *AddProductRequest) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddProductRequest) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *AddProductRequest) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *AddProductRequest) SetUnit(v string) {
	o.Unit = &v
}

// GetTax returns the Tax field value if set, zero value otherwise.
func (o *AddProductRequest) GetTax() float32 {
	if o == nil || IsNil(o.Tax) {
		var ret float32
		return ret
	}
	return *o.Tax
}

// GetTaxOk returns a tuple with the Tax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddProductRequest) GetTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.Tax) {
		return nil, false
	}
	return o.Tax, true
}

// HasTax returns a boolean if a field has been set.
func (o *AddProductRequest) HasTax() bool {
	if o != nil && !IsNil(o.Tax) {
		return true
	}

	return false
}

// SetTax gets a reference to the given float32 and assigns it to the Tax field.
func (o *AddProductRequest) SetTax(v float32) {
	o.Tax = &v
}

// GetActiveFlag returns the ActiveFlag field value if set, zero value otherwise.
func (o *AddProductRequest) GetActiveFlag() bool {
	if o == nil || IsNil(o.ActiveFlag) {
		var ret bool
		return ret
	}
	return *o.ActiveFlag
}

// GetActiveFlagOk returns a tuple with the ActiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddProductRequest) GetActiveFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.ActiveFlag) {
		return nil, false
	}
	return o.ActiveFlag, true
}

// HasActiveFlag returns a boolean if a field has been set.
func (o *AddProductRequest) HasActiveFlag() bool {
	if o != nil && !IsNil(o.ActiveFlag) {
		return true
	}

	return false
}

// SetActiveFlag gets a reference to the given bool and assigns it to the ActiveFlag field.
func (o *AddProductRequest) SetActiveFlag(v bool) {
	o.ActiveFlag = &v
}

// GetSelectable returns the Selectable field value if set, zero value otherwise.
func (o *AddProductRequest) GetSelectable() bool {
	if o == nil || IsNil(o.Selectable) {
		var ret bool
		return ret
	}
	return *o.Selectable
}

// GetSelectableOk returns a tuple with the Selectable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddProductRequest) GetSelectableOk() (*bool, bool) {
	if o == nil || IsNil(o.Selectable) {
		return nil, false
	}
	return o.Selectable, true
}

// HasSelectable returns a boolean if a field has been set.
func (o *AddProductRequest) HasSelectable() bool {
	if o != nil && !IsNil(o.Selectable) {
		return true
	}

	return false
}

// SetSelectable gets a reference to the given bool and assigns it to the Selectable field.
func (o *AddProductRequest) SetSelectable(v bool) {
	o.Selectable = &v
}

// GetVisibleTo returns the VisibleTo field value if set, zero value otherwise.
func (o *AddProductRequest) GetVisibleTo() string {
	if o == nil || IsNil(o.VisibleTo) {
		var ret string
		return ret
	}
	return *o.VisibleTo
}

// GetVisibleToOk returns a tuple with the VisibleTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddProductRequest) GetVisibleToOk() (*string, bool) {
	if o == nil || IsNil(o.VisibleTo) {
		return nil, false
	}
	return o.VisibleTo, true
}

// HasVisibleTo returns a boolean if a field has been set.
func (o *AddProductRequest) HasVisibleTo() bool {
	if o != nil && !IsNil(o.VisibleTo) {
		return true
	}

	return false
}

// SetVisibleTo gets a reference to the given string and assigns it to the VisibleTo field.
func (o *AddProductRequest) SetVisibleTo(v string) {
	o.VisibleTo = &v
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise.
func (o *AddProductRequest) GetOwnerId() int32 {
	if o == nil || IsNil(o.OwnerId) {
		var ret int32
		return ret
	}
	return *o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddProductRequest) GetOwnerIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OwnerId) {
		return nil, false
	}
	return o.OwnerId, true
}

// HasOwnerId returns a boolean if a field has been set.
func (o *AddProductRequest) HasOwnerId() bool {
	if o != nil && !IsNil(o.OwnerId) {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given int32 and assigns it to the OwnerId field.
func (o *AddProductRequest) SetOwnerId(v int32) {
	o.OwnerId = &v
}

// GetPrices returns the Prices field value if set, zero value otherwise.
func (o *AddProductRequest) GetPrices() []map[string]interface{} {
	if o == nil || IsNil(o.Prices) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Prices
}

// GetPricesOk returns a tuple with the Prices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddProductRequest) GetPricesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Prices) {
		return nil, false
	}
	return o.Prices, true
}

// HasPrices returns a boolean if a field has been set.
func (o *AddProductRequest) HasPrices() bool {
	if o != nil && !IsNil(o.Prices) {
		return true
	}

	return false
}

// SetPrices gets a reference to the given []map[string]interface{} and assigns it to the Prices field.
func (o *AddProductRequest) SetPrices(v []map[string]interface{}) {
	o.Prices = v
}

// GetBillingFrequency returns the BillingFrequency field value if set, zero value otherwise.
func (o *AddProductRequest) GetBillingFrequency() string {
	if o == nil || IsNil(o.BillingFrequency) {
		var ret string
		return ret
	}
	return *o.BillingFrequency
}

// GetBillingFrequencyOk returns a tuple with the BillingFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddProductRequest) GetBillingFrequencyOk() (*string, bool) {
	if o == nil || IsNil(o.BillingFrequency) {
		return nil, false
	}
	return o.BillingFrequency, true
}

// HasBillingFrequency returns a boolean if a field has been set.
func (o *AddProductRequest) HasBillingFrequency() bool {
	if o != nil && !IsNil(o.BillingFrequency) {
		return true
	}

	return false
}

// SetBillingFrequency gets a reference to the given string and assigns it to the BillingFrequency field.
func (o *AddProductRequest) SetBillingFrequency(v string) {
	o.BillingFrequency = &v
}

// GetBillingFrequencyCycles returns the BillingFrequencyCycles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddProductRequest) GetBillingFrequencyCycles() int32 {
	if o == nil || IsNil(o.BillingFrequencyCycles.Get()) {
		var ret int32
		return ret
	}
	return *o.BillingFrequencyCycles.Get()
}

// GetBillingFrequencyCyclesOk returns a tuple with the BillingFrequencyCycles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddProductRequest) GetBillingFrequencyCyclesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillingFrequencyCycles.Get(), o.BillingFrequencyCycles.IsSet()
}

// HasBillingFrequencyCycles returns a boolean if a field has been set.
func (o *AddProductRequest) HasBillingFrequencyCycles() bool {
	if o != nil && o.BillingFrequencyCycles.IsSet() {
		return true
	}

	return false
}

// SetBillingFrequencyCycles gets a reference to the given NullableInt32 and assigns it to the BillingFrequencyCycles field.
func (o *AddProductRequest) SetBillingFrequencyCycles(v int32) {
	o.BillingFrequencyCycles.Set(&v)
}
// SetBillingFrequencyCyclesNil sets the value for BillingFrequencyCycles to be an explicit nil
func (o *AddProductRequest) SetBillingFrequencyCyclesNil() {
	o.BillingFrequencyCycles.Set(nil)
}

// UnsetBillingFrequencyCycles ensures that no value is present for BillingFrequencyCycles, not even an explicit nil
func (o *AddProductRequest) UnsetBillingFrequencyCycles() {
	o.BillingFrequencyCycles.Unset()
}

func (o AddProductRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddProductRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !IsNil(o.Tax) {
		toSerialize["tax"] = o.Tax
	}
	if !IsNil(o.ActiveFlag) {
		toSerialize["active_flag"] = o.ActiveFlag
	}
	if !IsNil(o.Selectable) {
		toSerialize["selectable"] = o.Selectable
	}
	if !IsNil(o.VisibleTo) {
		toSerialize["visible_to"] = o.VisibleTo
	}
	if !IsNil(o.OwnerId) {
		toSerialize["owner_id"] = o.OwnerId
	}
	if !IsNil(o.Prices) {
		toSerialize["prices"] = o.Prices
	}
	if !IsNil(o.BillingFrequency) {
		toSerialize["billing_frequency"] = o.BillingFrequency
	}
	if o.BillingFrequencyCycles.IsSet() {
		toSerialize["billing_frequency_cycles"] = o.BillingFrequencyCycles.Get()
	}
	return toSerialize, nil
}

func (o *AddProductRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddProductRequest := _AddProductRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddProductRequest)

	if err != nil {
		return err
	}

	*o = AddProductRequest(varAddProductRequest)

	return err
}

type NullableAddProductRequest struct {
	value *AddProductRequest
	isSet bool
}

func (v NullableAddProductRequest) Get() *AddProductRequest {
	return v.value
}

func (v *NullableAddProductRequest) Set(val *AddProductRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddProductRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddProductRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddProductRequest(val *AddProductRequest) *NullableAddProductRequest {
	return &NullableAddProductRequest{value: val, isSet: true}
}

func (v NullableAddProductRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddProductRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


