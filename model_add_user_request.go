/*
Pipedrive API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AddUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddUserRequest{}

// AddUserRequest struct for AddUserRequest
type AddUserRequest struct {
	// The email of the user
	Email string `json:"email"`
	// The access given to the user. Each item in the array represents access to a specific app. Optionally may include either admin flag or permission set ID to specify which access to give within the app. If both are omitted, the default access for the corresponding app will be used. It requires structure as follows: `[{ app: 'sales', permission_set_id: '62cc4d7f-4038-4352-abf3-a8c1c822b631' }, { app: 'global', admin: true }, { app: 'account_settings' }]` 
	Access []AddUserRequestAccessInner `json:"access,omitempty"`
	// Whether the user is active or not. `false` = Not activated, `true` = Activated
	ActiveFlag *bool `json:"active_flag,omitempty"`
}

// NewAddUserRequest instantiates a new AddUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddUserRequest(email string) *AddUserRequest {
	this := AddUserRequest{}
	this.Email = email
	var activeFlag bool = true
	this.ActiveFlag = &activeFlag
	return &this
}

// NewAddUserRequestWithDefaults instantiates a new AddUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddUserRequestWithDefaults() *AddUserRequest {
	this := AddUserRequest{}
	var activeFlag bool = true
	this.ActiveFlag = &activeFlag
	return &this
}

// GetEmail returns the Email field value
func (o *AddUserRequest) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *AddUserRequest) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *AddUserRequest) SetEmail(v string) {
	o.Email = v
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *AddUserRequest) GetAccess() []AddUserRequestAccessInner {
	if o == nil || IsNil(o.Access) {
		var ret []AddUserRequestAccessInner
		return ret
	}
	return o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUserRequest) GetAccessOk() ([]AddUserRequestAccessInner, bool) {
	if o == nil || IsNil(o.Access) {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *AddUserRequest) HasAccess() bool {
	if o != nil && !IsNil(o.Access) {
		return true
	}

	return false
}

// SetAccess gets a reference to the given []AddUserRequestAccessInner and assigns it to the Access field.
func (o *AddUserRequest) SetAccess(v []AddUserRequestAccessInner) {
	o.Access = v
}

// GetActiveFlag returns the ActiveFlag field value if set, zero value otherwise.
func (o *AddUserRequest) GetActiveFlag() bool {
	if o == nil || IsNil(o.ActiveFlag) {
		var ret bool
		return ret
	}
	return *o.ActiveFlag
}

// GetActiveFlagOk returns a tuple with the ActiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUserRequest) GetActiveFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.ActiveFlag) {
		return nil, false
	}
	return o.ActiveFlag, true
}

// HasActiveFlag returns a boolean if a field has been set.
func (o *AddUserRequest) HasActiveFlag() bool {
	if o != nil && !IsNil(o.ActiveFlag) {
		return true
	}

	return false
}

// SetActiveFlag gets a reference to the given bool and assigns it to the ActiveFlag field.
func (o *AddUserRequest) SetActiveFlag(v bool) {
	o.ActiveFlag = &v
}

func (o AddUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	if !IsNil(o.Access) {
		toSerialize["access"] = o.Access
	}
	if !IsNil(o.ActiveFlag) {
		toSerialize["active_flag"] = o.ActiveFlag
	}
	return toSerialize, nil
}

type NullableAddUserRequest struct {
	value *AddUserRequest
	isSet bool
}

func (v NullableAddUserRequest) Get() *AddUserRequest {
	return v.value
}

func (v *NullableAddUserRequest) Set(val *AddUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddUserRequest(val *AddUserRequest) *NullableAddUserRequest {
	return &NullableAddUserRequest{value: val, isSet: true}
}

func (v NullableAddUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


