/*
Pipedrive API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddWebhookRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddWebhookRequest{}

// AddWebhookRequest struct for AddWebhookRequest
type AddWebhookRequest struct {
	// A full, valid, publicly accessible URL which determines where to send the notifications. Please note that you cannot use Pipedrive API endpoints as the `subscription_url` and the chosen URL must not redirect to another link.
	SubscriptionUrl string `json:"subscription_url"`
	// The type of action to receive notifications about. Wildcard will match all supported actions.
	EventAction string `json:"event_action"`
	// The type of object to receive notifications about. Wildcard will match all supported objects.
	EventObject string `json:"event_object"`
	// The ID of the user that this webhook will be authorized with. You have the option to use a different user's `user_id`. If it is not set, the current user's `user_id` will be used. As each webhook event is checked against a user's permissions, the webhook will only be sent if the user has access to the specified object(s). If you want to receive notifications for all events, please use a top-level admin userâ€™s `user_id`.
	UserId *int32 `json:"user_id,omitempty"`
	// The HTTP basic auth username of the subscription URL endpoint (if required)
	HttpAuthUser *string `json:"http_auth_user,omitempty"`
	// The HTTP basic auth password of the subscription URL endpoint (if required)
	HttpAuthPassword *string `json:"http_auth_password,omitempty"`
	// The webhook's version
	Version *string `json:"version,omitempty"`
}

type _AddWebhookRequest AddWebhookRequest

// NewAddWebhookRequest instantiates a new AddWebhookRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddWebhookRequest(subscriptionUrl string, eventAction string, eventObject string) *AddWebhookRequest {
	this := AddWebhookRequest{}
	this.SubscriptionUrl = subscriptionUrl
	this.EventAction = eventAction
	this.EventObject = eventObject
	var version string = "1.0"
	this.Version = &version
	return &this
}

// NewAddWebhookRequestWithDefaults instantiates a new AddWebhookRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddWebhookRequestWithDefaults() *AddWebhookRequest {
	this := AddWebhookRequest{}
	var version string = "1.0"
	this.Version = &version
	return &this
}

// GetSubscriptionUrl returns the SubscriptionUrl field value
func (o *AddWebhookRequest) GetSubscriptionUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscriptionUrl
}

// GetSubscriptionUrlOk returns a tuple with the SubscriptionUrl field value
// and a boolean to check if the value has been set.
func (o *AddWebhookRequest) GetSubscriptionUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionUrl, true
}

// SetSubscriptionUrl sets field value
func (o *AddWebhookRequest) SetSubscriptionUrl(v string) {
	o.SubscriptionUrl = v
}

// GetEventAction returns the EventAction field value
func (o *AddWebhookRequest) GetEventAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventAction
}

// GetEventActionOk returns a tuple with the EventAction field value
// and a boolean to check if the value has been set.
func (o *AddWebhookRequest) GetEventActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventAction, true
}

// SetEventAction sets field value
func (o *AddWebhookRequest) SetEventAction(v string) {
	o.EventAction = v
}

// GetEventObject returns the EventObject field value
func (o *AddWebhookRequest) GetEventObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventObject
}

// GetEventObjectOk returns a tuple with the EventObject field value
// and a boolean to check if the value has been set.
func (o *AddWebhookRequest) GetEventObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventObject, true
}

// SetEventObject sets field value
func (o *AddWebhookRequest) SetEventObject(v string) {
	o.EventObject = v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *AddWebhookRequest) GetUserId() int32 {
	if o == nil || IsNil(o.UserId) {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddWebhookRequest) GetUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *AddWebhookRequest) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *AddWebhookRequest) SetUserId(v int32) {
	o.UserId = &v
}

// GetHttpAuthUser returns the HttpAuthUser field value if set, zero value otherwise.
func (o *AddWebhookRequest) GetHttpAuthUser() string {
	if o == nil || IsNil(o.HttpAuthUser) {
		var ret string
		return ret
	}
	return *o.HttpAuthUser
}

// GetHttpAuthUserOk returns a tuple with the HttpAuthUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddWebhookRequest) GetHttpAuthUserOk() (*string, bool) {
	if o == nil || IsNil(o.HttpAuthUser) {
		return nil, false
	}
	return o.HttpAuthUser, true
}

// HasHttpAuthUser returns a boolean if a field has been set.
func (o *AddWebhookRequest) HasHttpAuthUser() bool {
	if o != nil && !IsNil(o.HttpAuthUser) {
		return true
	}

	return false
}

// SetHttpAuthUser gets a reference to the given string and assigns it to the HttpAuthUser field.
func (o *AddWebhookRequest) SetHttpAuthUser(v string) {
	o.HttpAuthUser = &v
}

// GetHttpAuthPassword returns the HttpAuthPassword field value if set, zero value otherwise.
func (o *AddWebhookRequest) GetHttpAuthPassword() string {
	if o == nil || IsNil(o.HttpAuthPassword) {
		var ret string
		return ret
	}
	return *o.HttpAuthPassword
}

// GetHttpAuthPasswordOk returns a tuple with the HttpAuthPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddWebhookRequest) GetHttpAuthPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.HttpAuthPassword) {
		return nil, false
	}
	return o.HttpAuthPassword, true
}

// HasHttpAuthPassword returns a boolean if a field has been set.
func (o *AddWebhookRequest) HasHttpAuthPassword() bool {
	if o != nil && !IsNil(o.HttpAuthPassword) {
		return true
	}

	return false
}

// SetHttpAuthPassword gets a reference to the given string and assigns it to the HttpAuthPassword field.
func (o *AddWebhookRequest) SetHttpAuthPassword(v string) {
	o.HttpAuthPassword = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AddWebhookRequest) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddWebhookRequest) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *AddWebhookRequest) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *AddWebhookRequest) SetVersion(v string) {
	o.Version = &v
}

func (o AddWebhookRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddWebhookRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subscription_url"] = o.SubscriptionUrl
	toSerialize["event_action"] = o.EventAction
	toSerialize["event_object"] = o.EventObject
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.HttpAuthUser) {
		toSerialize["http_auth_user"] = o.HttpAuthUser
	}
	if !IsNil(o.HttpAuthPassword) {
		toSerialize["http_auth_password"] = o.HttpAuthPassword
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

func (o *AddWebhookRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subscription_url",
		"event_action",
		"event_object",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddWebhookRequest := _AddWebhookRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddWebhookRequest)

	if err != nil {
		return err
	}

	*o = AddWebhookRequest(varAddWebhookRequest)

	return err
}

type NullableAddWebhookRequest struct {
	value *AddWebhookRequest
	isSet bool
}

func (v NullableAddWebhookRequest) Get() *AddWebhookRequest {
	return v.value
}

func (v *NullableAddWebhookRequest) Set(val *AddWebhookRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddWebhookRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddWebhookRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddWebhookRequest(val *AddWebhookRequest) *NullableAddWebhookRequest {
	return &NullableAddWebhookRequest{value: val, isSet: true}
}

func (v NullableAddWebhookRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddWebhookRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


