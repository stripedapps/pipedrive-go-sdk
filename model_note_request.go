/*
Pipedrive API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NoteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NoteRequest{}

// NoteRequest struct for NoteRequest
type NoteRequest struct {
	// The content of the note in HTML format. Subject to sanitization on the back-end.
	Content *string `json:"content,omitempty"`
	// The ID of the lead the note will be attached to
	LeadId *string `json:"lead_id,omitempty"`
	// The ID of the deal the note will be attached to
	DealId *int32 `json:"deal_id,omitempty"`
	// The ID of the person the note will be attached to
	PersonId *int32 `json:"person_id,omitempty"`
	// The ID of the organization the note will be attached to
	OrgId *int32 `json:"org_id,omitempty"`
	// The ID of the user who will be marked as the author of the note. Only an admin can change the author.
	UserId *int32 `json:"user_id,omitempty"`
	// The optional creation date & time of the note in UTC. Can be set in the past or in the future. Format: YYYY-MM-DD HH:MM:SS
	AddTime *string `json:"add_time,omitempty"`
	PinnedToLeadFlag *float32 `json:"pinned_to_lead_flag,omitempty"`
	PinnedToDealFlag *float32 `json:"pinned_to_deal_flag,omitempty"`
	PinnedToOrganizationFlag *float32 `json:"pinned_to_organization_flag,omitempty"`
	PinnedToPersonFlag *float32 `json:"pinned_to_person_flag,omitempty"`
}

// NewNoteRequest instantiates a new NoteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNoteRequest() *NoteRequest {
	this := NoteRequest{}
	return &this
}

// NewNoteRequestWithDefaults instantiates a new NoteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoteRequestWithDefaults() *NoteRequest {
	this := NoteRequest{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *NoteRequest) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteRequest) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *NoteRequest) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *NoteRequest) SetContent(v string) {
	o.Content = &v
}

// GetLeadId returns the LeadId field value if set, zero value otherwise.
func (o *NoteRequest) GetLeadId() string {
	if o == nil || IsNil(o.LeadId) {
		var ret string
		return ret
	}
	return *o.LeadId
}

// GetLeadIdOk returns a tuple with the LeadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteRequest) GetLeadIdOk() (*string, bool) {
	if o == nil || IsNil(o.LeadId) {
		return nil, false
	}
	return o.LeadId, true
}

// HasLeadId returns a boolean if a field has been set.
func (o *NoteRequest) HasLeadId() bool {
	if o != nil && !IsNil(o.LeadId) {
		return true
	}

	return false
}

// SetLeadId gets a reference to the given string and assigns it to the LeadId field.
func (o *NoteRequest) SetLeadId(v string) {
	o.LeadId = &v
}

// GetDealId returns the DealId field value if set, zero value otherwise.
func (o *NoteRequest) GetDealId() int32 {
	if o == nil || IsNil(o.DealId) {
		var ret int32
		return ret
	}
	return *o.DealId
}

// GetDealIdOk returns a tuple with the DealId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteRequest) GetDealIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DealId) {
		return nil, false
	}
	return o.DealId, true
}

// HasDealId returns a boolean if a field has been set.
func (o *NoteRequest) HasDealId() bool {
	if o != nil && !IsNil(o.DealId) {
		return true
	}

	return false
}

// SetDealId gets a reference to the given int32 and assigns it to the DealId field.
func (o *NoteRequest) SetDealId(v int32) {
	o.DealId = &v
}

// GetPersonId returns the PersonId field value if set, zero value otherwise.
func (o *NoteRequest) GetPersonId() int32 {
	if o == nil || IsNil(o.PersonId) {
		var ret int32
		return ret
	}
	return *o.PersonId
}

// GetPersonIdOk returns a tuple with the PersonId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteRequest) GetPersonIdOk() (*int32, bool) {
	if o == nil || IsNil(o.PersonId) {
		return nil, false
	}
	return o.PersonId, true
}

// HasPersonId returns a boolean if a field has been set.
func (o *NoteRequest) HasPersonId() bool {
	if o != nil && !IsNil(o.PersonId) {
		return true
	}

	return false
}

// SetPersonId gets a reference to the given int32 and assigns it to the PersonId field.
func (o *NoteRequest) SetPersonId(v int32) {
	o.PersonId = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *NoteRequest) GetOrgId() int32 {
	if o == nil || IsNil(o.OrgId) {
		var ret int32
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteRequest) GetOrgIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *NoteRequest) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given int32 and assigns it to the OrgId field.
func (o *NoteRequest) SetOrgId(v int32) {
	o.OrgId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *NoteRequest) GetUserId() int32 {
	if o == nil || IsNil(o.UserId) {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteRequest) GetUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *NoteRequest) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *NoteRequest) SetUserId(v int32) {
	o.UserId = &v
}

// GetAddTime returns the AddTime field value if set, zero value otherwise.
func (o *NoteRequest) GetAddTime() string {
	if o == nil || IsNil(o.AddTime) {
		var ret string
		return ret
	}
	return *o.AddTime
}

// GetAddTimeOk returns a tuple with the AddTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteRequest) GetAddTimeOk() (*string, bool) {
	if o == nil || IsNil(o.AddTime) {
		return nil, false
	}
	return o.AddTime, true
}

// HasAddTime returns a boolean if a field has been set.
func (o *NoteRequest) HasAddTime() bool {
	if o != nil && !IsNil(o.AddTime) {
		return true
	}

	return false
}

// SetAddTime gets a reference to the given string and assigns it to the AddTime field.
func (o *NoteRequest) SetAddTime(v string) {
	o.AddTime = &v
}

// GetPinnedToLeadFlag returns the PinnedToLeadFlag field value if set, zero value otherwise.
func (o *NoteRequest) GetPinnedToLeadFlag() float32 {
	if o == nil || IsNil(o.PinnedToLeadFlag) {
		var ret float32
		return ret
	}
	return *o.PinnedToLeadFlag
}

// GetPinnedToLeadFlagOk returns a tuple with the PinnedToLeadFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteRequest) GetPinnedToLeadFlagOk() (*float32, bool) {
	if o == nil || IsNil(o.PinnedToLeadFlag) {
		return nil, false
	}
	return o.PinnedToLeadFlag, true
}

// HasPinnedToLeadFlag returns a boolean if a field has been set.
func (o *NoteRequest) HasPinnedToLeadFlag() bool {
	if o != nil && !IsNil(o.PinnedToLeadFlag) {
		return true
	}

	return false
}

// SetPinnedToLeadFlag gets a reference to the given float32 and assigns it to the PinnedToLeadFlag field.
func (o *NoteRequest) SetPinnedToLeadFlag(v float32) {
	o.PinnedToLeadFlag = &v
}

// GetPinnedToDealFlag returns the PinnedToDealFlag field value if set, zero value otherwise.
func (o *NoteRequest) GetPinnedToDealFlag() float32 {
	if o == nil || IsNil(o.PinnedToDealFlag) {
		var ret float32
		return ret
	}
	return *o.PinnedToDealFlag
}

// GetPinnedToDealFlagOk returns a tuple with the PinnedToDealFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteRequest) GetPinnedToDealFlagOk() (*float32, bool) {
	if o == nil || IsNil(o.PinnedToDealFlag) {
		return nil, false
	}
	return o.PinnedToDealFlag, true
}

// HasPinnedToDealFlag returns a boolean if a field has been set.
func (o *NoteRequest) HasPinnedToDealFlag() bool {
	if o != nil && !IsNil(o.PinnedToDealFlag) {
		return true
	}

	return false
}

// SetPinnedToDealFlag gets a reference to the given float32 and assigns it to the PinnedToDealFlag field.
func (o *NoteRequest) SetPinnedToDealFlag(v float32) {
	o.PinnedToDealFlag = &v
}

// GetPinnedToOrganizationFlag returns the PinnedToOrganizationFlag field value if set, zero value otherwise.
func (o *NoteRequest) GetPinnedToOrganizationFlag() float32 {
	if o == nil || IsNil(o.PinnedToOrganizationFlag) {
		var ret float32
		return ret
	}
	return *o.PinnedToOrganizationFlag
}

// GetPinnedToOrganizationFlagOk returns a tuple with the PinnedToOrganizationFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteRequest) GetPinnedToOrganizationFlagOk() (*float32, bool) {
	if o == nil || IsNil(o.PinnedToOrganizationFlag) {
		return nil, false
	}
	return o.PinnedToOrganizationFlag, true
}

// HasPinnedToOrganizationFlag returns a boolean if a field has been set.
func (o *NoteRequest) HasPinnedToOrganizationFlag() bool {
	if o != nil && !IsNil(o.PinnedToOrganizationFlag) {
		return true
	}

	return false
}

// SetPinnedToOrganizationFlag gets a reference to the given float32 and assigns it to the PinnedToOrganizationFlag field.
func (o *NoteRequest) SetPinnedToOrganizationFlag(v float32) {
	o.PinnedToOrganizationFlag = &v
}

// GetPinnedToPersonFlag returns the PinnedToPersonFlag field value if set, zero value otherwise.
func (o *NoteRequest) GetPinnedToPersonFlag() float32 {
	if o == nil || IsNil(o.PinnedToPersonFlag) {
		var ret float32
		return ret
	}
	return *o.PinnedToPersonFlag
}

// GetPinnedToPersonFlagOk returns a tuple with the PinnedToPersonFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteRequest) GetPinnedToPersonFlagOk() (*float32, bool) {
	if o == nil || IsNil(o.PinnedToPersonFlag) {
		return nil, false
	}
	return o.PinnedToPersonFlag, true
}

// HasPinnedToPersonFlag returns a boolean if a field has been set.
func (o *NoteRequest) HasPinnedToPersonFlag() bool {
	if o != nil && !IsNil(o.PinnedToPersonFlag) {
		return true
	}

	return false
}

// SetPinnedToPersonFlag gets a reference to the given float32 and assigns it to the PinnedToPersonFlag field.
func (o *NoteRequest) SetPinnedToPersonFlag(v float32) {
	o.PinnedToPersonFlag = &v
}

func (o NoteRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NoteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.LeadId) {
		toSerialize["lead_id"] = o.LeadId
	}
	if !IsNil(o.DealId) {
		toSerialize["deal_id"] = o.DealId
	}
	if !IsNil(o.PersonId) {
		toSerialize["person_id"] = o.PersonId
	}
	if !IsNil(o.OrgId) {
		toSerialize["org_id"] = o.OrgId
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.AddTime) {
		toSerialize["add_time"] = o.AddTime
	}
	if !IsNil(o.PinnedToLeadFlag) {
		toSerialize["pinned_to_lead_flag"] = o.PinnedToLeadFlag
	}
	if !IsNil(o.PinnedToDealFlag) {
		toSerialize["pinned_to_deal_flag"] = o.PinnedToDealFlag
	}
	if !IsNil(o.PinnedToOrganizationFlag) {
		toSerialize["pinned_to_organization_flag"] = o.PinnedToOrganizationFlag
	}
	if !IsNil(o.PinnedToPersonFlag) {
		toSerialize["pinned_to_person_flag"] = o.PinnedToPersonFlag
	}
	return toSerialize, nil
}

type NullableNoteRequest struct {
	value *NoteRequest
	isSet bool
}

func (v NullableNoteRequest) Get() *NoteRequest {
	return v.value
}

func (v *NullableNoteRequest) Set(val *NoteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNoteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNoteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoteRequest(val *NoteRequest) *NullableNoteRequest {
	return &NullableNoteRequest{value: val, isSet: true}
}

func (v NullableNoteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


