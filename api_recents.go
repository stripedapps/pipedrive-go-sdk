/*
Pipedrive API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// RecentsAPIService RecentsAPI service
type RecentsAPIService service

type ApiGetRecentsRequest struct {
	ctx context.Context
	ApiService *RecentsAPIService
	sinceTimestamp *string
	items *string
	start *int32
	limit *int32
}

// The timestamp in UTC. Format: YYYY-MM-DD HH:MM:SS.
func (r ApiGetRecentsRequest) SinceTimestamp(sinceTimestamp string) ApiGetRecentsRequest {
	r.sinceTimestamp = &sinceTimestamp
	return r
}

// Multiple selection of item types to include in the query (optional)
func (r ApiGetRecentsRequest) Items(items string) ApiGetRecentsRequest {
	r.items = &items
	return r
}

// Pagination start
func (r ApiGetRecentsRequest) Start(start int32) ApiGetRecentsRequest {
	r.start = &start
	return r
}

// Items shown per page
func (r ApiGetRecentsRequest) Limit(limit int32) ApiGetRecentsRequest {
	r.limit = &limit
	return r
}

func (r ApiGetRecentsRequest) Execute() (*GetRecentsResponse200, *http.Response, error) {
	return r.ApiService.GetRecentsExecute(r)
}

/*
GetRecents Get recents

Returns data about all recent changes occurred after the given timestamp.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetRecentsRequest
*/
func (a *RecentsAPIService) GetRecents(ctx context.Context) ApiGetRecentsRequest {
	return ApiGetRecentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetRecentsResponse200
func (a *RecentsAPIService) GetRecentsExecute(r ApiGetRecentsRequest) (*GetRecentsResponse200, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRecentsResponse200
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RecentsAPIService.GetRecents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/recents"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sinceTimestamp == nil {
		return localVarReturnValue, nil, reportError("sinceTimestamp is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "since_timestamp", r.sinceTimestamp, "")
	if r.items != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "items", r.items, "")
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	} else {
		var defaultValue int32 = 0
		r.start = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_token", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
