/*
Pipedrive API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the SubscriptionsIdResponse200AllOfData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionsIdResponse200AllOfData{}

// SubscriptionsIdResponse200AllOfData struct for SubscriptionsIdResponse200AllOfData
type SubscriptionsIdResponse200AllOfData struct {
	// The ID of the subscription
	Id *int32 `json:"id,omitempty"`
	// The ID of the user who created the subscription
	UserId *int32 `json:"user_id,omitempty"`
	// The ID of the deal this subscription is associated with
	DealId *int32 `json:"deal_id,omitempty"`
	// The description of the recurring subscription
	Description *string `json:"description,omitempty"`
	// The subscription status
	IsActive *bool `json:"is_active,omitempty"`
	// Shows how many payments a recurring subscription has
	CyclesCount *int32 `json:"cycles_count,omitempty"`
	// The amount of each payment
	CycleAmount *int32 `json:"cycle_amount,omitempty"`
	// Indicates that the recurring subscription will last until it is manually canceled or deleted
	Infinite *bool `json:"infinite,omitempty"`
	// The currency of the subscription
	Currency *string `json:"currency,omitempty"`
	// The interval between payments
	CadenceType *string `json:"cadence_type,omitempty"`
	// The start date of the recurring subscription
	StartDate *string `json:"start_date,omitempty"`
	// The end date of the subscription
	EndDate *string `json:"end_date,omitempty"`
	// The total value of all payments
	LifetimeValue *float64 `json:"lifetime_value,omitempty"`
	// The final status of the subscription
	FinalStatus NullableString `json:"final_status,omitempty"`
	// The creation time of the subscription
	AddTime *time.Time `json:"add_time,omitempty"`
	// The update time of the subscription
	UpdateTime *time.Time `json:"update_time,omitempty"`
}

// NewSubscriptionsIdResponse200AllOfData instantiates a new SubscriptionsIdResponse200AllOfData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionsIdResponse200AllOfData() *SubscriptionsIdResponse200AllOfData {
	this := SubscriptionsIdResponse200AllOfData{}
	return &this
}

// NewSubscriptionsIdResponse200AllOfDataWithDefaults instantiates a new SubscriptionsIdResponse200AllOfData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionsIdResponse200AllOfDataWithDefaults() *SubscriptionsIdResponse200AllOfData {
	this := SubscriptionsIdResponse200AllOfData{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubscriptionsIdResponse200AllOfData) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionsIdResponse200AllOfData) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubscriptionsIdResponse200AllOfData) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SubscriptionsIdResponse200AllOfData) SetId(v int32) {
	o.Id = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *SubscriptionsIdResponse200AllOfData) GetUserId() int32 {
	if o == nil || IsNil(o.UserId) {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionsIdResponse200AllOfData) GetUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *SubscriptionsIdResponse200AllOfData) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *SubscriptionsIdResponse200AllOfData) SetUserId(v int32) {
	o.UserId = &v
}

// GetDealId returns the DealId field value if set, zero value otherwise.
func (o *SubscriptionsIdResponse200AllOfData) GetDealId() int32 {
	if o == nil || IsNil(o.DealId) {
		var ret int32
		return ret
	}
	return *o.DealId
}

// GetDealIdOk returns a tuple with the DealId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionsIdResponse200AllOfData) GetDealIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DealId) {
		return nil, false
	}
	return o.DealId, true
}

// HasDealId returns a boolean if a field has been set.
func (o *SubscriptionsIdResponse200AllOfData) HasDealId() bool {
	if o != nil && !IsNil(o.DealId) {
		return true
	}

	return false
}

// SetDealId gets a reference to the given int32 and assigns it to the DealId field.
func (o *SubscriptionsIdResponse200AllOfData) SetDealId(v int32) {
	o.DealId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SubscriptionsIdResponse200AllOfData) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionsIdResponse200AllOfData) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SubscriptionsIdResponse200AllOfData) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SubscriptionsIdResponse200AllOfData) SetDescription(v string) {
	o.Description = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *SubscriptionsIdResponse200AllOfData) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionsIdResponse200AllOfData) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *SubscriptionsIdResponse200AllOfData) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *SubscriptionsIdResponse200AllOfData) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetCyclesCount returns the CyclesCount field value if set, zero value otherwise.
func (o *SubscriptionsIdResponse200AllOfData) GetCyclesCount() int32 {
	if o == nil || IsNil(o.CyclesCount) {
		var ret int32
		return ret
	}
	return *o.CyclesCount
}

// GetCyclesCountOk returns a tuple with the CyclesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionsIdResponse200AllOfData) GetCyclesCountOk() (*int32, bool) {
	if o == nil || IsNil(o.CyclesCount) {
		return nil, false
	}
	return o.CyclesCount, true
}

// HasCyclesCount returns a boolean if a field has been set.
func (o *SubscriptionsIdResponse200AllOfData) HasCyclesCount() bool {
	if o != nil && !IsNil(o.CyclesCount) {
		return true
	}

	return false
}

// SetCyclesCount gets a reference to the given int32 and assigns it to the CyclesCount field.
func (o *SubscriptionsIdResponse200AllOfData) SetCyclesCount(v int32) {
	o.CyclesCount = &v
}

// GetCycleAmount returns the CycleAmount field value if set, zero value otherwise.
func (o *SubscriptionsIdResponse200AllOfData) GetCycleAmount() int32 {
	if o == nil || IsNil(o.CycleAmount) {
		var ret int32
		return ret
	}
	return *o.CycleAmount
}

// GetCycleAmountOk returns a tuple with the CycleAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionsIdResponse200AllOfData) GetCycleAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.CycleAmount) {
		return nil, false
	}
	return o.CycleAmount, true
}

// HasCycleAmount returns a boolean if a field has been set.
func (o *SubscriptionsIdResponse200AllOfData) HasCycleAmount() bool {
	if o != nil && !IsNil(o.CycleAmount) {
		return true
	}

	return false
}

// SetCycleAmount gets a reference to the given int32 and assigns it to the CycleAmount field.
func (o *SubscriptionsIdResponse200AllOfData) SetCycleAmount(v int32) {
	o.CycleAmount = &v
}

// GetInfinite returns the Infinite field value if set, zero value otherwise.
func (o *SubscriptionsIdResponse200AllOfData) GetInfinite() bool {
	if o == nil || IsNil(o.Infinite) {
		var ret bool
		return ret
	}
	return *o.Infinite
}

// GetInfiniteOk returns a tuple with the Infinite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionsIdResponse200AllOfData) GetInfiniteOk() (*bool, bool) {
	if o == nil || IsNil(o.Infinite) {
		return nil, false
	}
	return o.Infinite, true
}

// HasInfinite returns a boolean if a field has been set.
func (o *SubscriptionsIdResponse200AllOfData) HasInfinite() bool {
	if o != nil && !IsNil(o.Infinite) {
		return true
	}

	return false
}

// SetInfinite gets a reference to the given bool and assigns it to the Infinite field.
func (o *SubscriptionsIdResponse200AllOfData) SetInfinite(v bool) {
	o.Infinite = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *SubscriptionsIdResponse200AllOfData) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionsIdResponse200AllOfData) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *SubscriptionsIdResponse200AllOfData) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *SubscriptionsIdResponse200AllOfData) SetCurrency(v string) {
	o.Currency = &v
}

// GetCadenceType returns the CadenceType field value if set, zero value otherwise.
func (o *SubscriptionsIdResponse200AllOfData) GetCadenceType() string {
	if o == nil || IsNil(o.CadenceType) {
		var ret string
		return ret
	}
	return *o.CadenceType
}

// GetCadenceTypeOk returns a tuple with the CadenceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionsIdResponse200AllOfData) GetCadenceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CadenceType) {
		return nil, false
	}
	return o.CadenceType, true
}

// HasCadenceType returns a boolean if a field has been set.
func (o *SubscriptionsIdResponse200AllOfData) HasCadenceType() bool {
	if o != nil && !IsNil(o.CadenceType) {
		return true
	}

	return false
}

// SetCadenceType gets a reference to the given string and assigns it to the CadenceType field.
func (o *SubscriptionsIdResponse200AllOfData) SetCadenceType(v string) {
	o.CadenceType = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *SubscriptionsIdResponse200AllOfData) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionsIdResponse200AllOfData) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *SubscriptionsIdResponse200AllOfData) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *SubscriptionsIdResponse200AllOfData) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *SubscriptionsIdResponse200AllOfData) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionsIdResponse200AllOfData) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *SubscriptionsIdResponse200AllOfData) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *SubscriptionsIdResponse200AllOfData) SetEndDate(v string) {
	o.EndDate = &v
}

// GetLifetimeValue returns the LifetimeValue field value if set, zero value otherwise.
func (o *SubscriptionsIdResponse200AllOfData) GetLifetimeValue() float64 {
	if o == nil || IsNil(o.LifetimeValue) {
		var ret float64
		return ret
	}
	return *o.LifetimeValue
}

// GetLifetimeValueOk returns a tuple with the LifetimeValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionsIdResponse200AllOfData) GetLifetimeValueOk() (*float64, bool) {
	if o == nil || IsNil(o.LifetimeValue) {
		return nil, false
	}
	return o.LifetimeValue, true
}

// HasLifetimeValue returns a boolean if a field has been set.
func (o *SubscriptionsIdResponse200AllOfData) HasLifetimeValue() bool {
	if o != nil && !IsNil(o.LifetimeValue) {
		return true
	}

	return false
}

// SetLifetimeValue gets a reference to the given float64 and assigns it to the LifetimeValue field.
func (o *SubscriptionsIdResponse200AllOfData) SetLifetimeValue(v float64) {
	o.LifetimeValue = &v
}

// GetFinalStatus returns the FinalStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubscriptionsIdResponse200AllOfData) GetFinalStatus() string {
	if o == nil || IsNil(o.FinalStatus.Get()) {
		var ret string
		return ret
	}
	return *o.FinalStatus.Get()
}

// GetFinalStatusOk returns a tuple with the FinalStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubscriptionsIdResponse200AllOfData) GetFinalStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FinalStatus.Get(), o.FinalStatus.IsSet()
}

// HasFinalStatus returns a boolean if a field has been set.
func (o *SubscriptionsIdResponse200AllOfData) HasFinalStatus() bool {
	if o != nil && o.FinalStatus.IsSet() {
		return true
	}

	return false
}

// SetFinalStatus gets a reference to the given NullableString and assigns it to the FinalStatus field.
func (o *SubscriptionsIdResponse200AllOfData) SetFinalStatus(v string) {
	o.FinalStatus.Set(&v)
}
// SetFinalStatusNil sets the value for FinalStatus to be an explicit nil
func (o *SubscriptionsIdResponse200AllOfData) SetFinalStatusNil() {
	o.FinalStatus.Set(nil)
}

// UnsetFinalStatus ensures that no value is present for FinalStatus, not even an explicit nil
func (o *SubscriptionsIdResponse200AllOfData) UnsetFinalStatus() {
	o.FinalStatus.Unset()
}

// GetAddTime returns the AddTime field value if set, zero value otherwise.
func (o *SubscriptionsIdResponse200AllOfData) GetAddTime() time.Time {
	if o == nil || IsNil(o.AddTime) {
		var ret time.Time
		return ret
	}
	return *o.AddTime
}

// GetAddTimeOk returns a tuple with the AddTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionsIdResponse200AllOfData) GetAddTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AddTime) {
		return nil, false
	}
	return o.AddTime, true
}

// HasAddTime returns a boolean if a field has been set.
func (o *SubscriptionsIdResponse200AllOfData) HasAddTime() bool {
	if o != nil && !IsNil(o.AddTime) {
		return true
	}

	return false
}

// SetAddTime gets a reference to the given time.Time and assigns it to the AddTime field.
func (o *SubscriptionsIdResponse200AllOfData) SetAddTime(v time.Time) {
	o.AddTime = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *SubscriptionsIdResponse200AllOfData) GetUpdateTime() time.Time {
	if o == nil || IsNil(o.UpdateTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionsIdResponse200AllOfData) GetUpdateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdateTime) {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *SubscriptionsIdResponse200AllOfData) HasUpdateTime() bool {
	if o != nil && !IsNil(o.UpdateTime) {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given time.Time and assigns it to the UpdateTime field.
func (o *SubscriptionsIdResponse200AllOfData) SetUpdateTime(v time.Time) {
	o.UpdateTime = &v
}

func (o SubscriptionsIdResponse200AllOfData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionsIdResponse200AllOfData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.DealId) {
		toSerialize["deal_id"] = o.DealId
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.IsActive) {
		toSerialize["is_active"] = o.IsActive
	}
	if !IsNil(o.CyclesCount) {
		toSerialize["cycles_count"] = o.CyclesCount
	}
	if !IsNil(o.CycleAmount) {
		toSerialize["cycle_amount"] = o.CycleAmount
	}
	if !IsNil(o.Infinite) {
		toSerialize["infinite"] = o.Infinite
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.CadenceType) {
		toSerialize["cadence_type"] = o.CadenceType
	}
	if !IsNil(o.StartDate) {
		toSerialize["start_date"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["end_date"] = o.EndDate
	}
	if !IsNil(o.LifetimeValue) {
		toSerialize["lifetime_value"] = o.LifetimeValue
	}
	if o.FinalStatus.IsSet() {
		toSerialize["final_status"] = o.FinalStatus.Get()
	}
	if !IsNil(o.AddTime) {
		toSerialize["add_time"] = o.AddTime
	}
	if !IsNil(o.UpdateTime) {
		toSerialize["update_time"] = o.UpdateTime
	}
	return toSerialize, nil
}

type NullableSubscriptionsIdResponse200AllOfData struct {
	value *SubscriptionsIdResponse200AllOfData
	isSet bool
}

func (v NullableSubscriptionsIdResponse200AllOfData) Get() *SubscriptionsIdResponse200AllOfData {
	return v.value
}

func (v *NullableSubscriptionsIdResponse200AllOfData) Set(val *SubscriptionsIdResponse200AllOfData) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionsIdResponse200AllOfData) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionsIdResponse200AllOfData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionsIdResponse200AllOfData(val *SubscriptionsIdResponse200AllOfData) *NullableSubscriptionsIdResponse200AllOfData {
	return &NullableSubscriptionsIdResponse200AllOfData{value: val, isSet: true}
}

func (v NullableSubscriptionsIdResponse200AllOfData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionsIdResponse200AllOfData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


