/*
Pipedrive API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetCurrentUserResponse200AllOfDataAllOfLanguage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetCurrentUserResponse200AllOfDataAllOfLanguage{}

// GetCurrentUserResponse200AllOfDataAllOfLanguage The user language details
type GetCurrentUserResponse200AllOfDataAllOfLanguage struct {
	// The language code. E.g. en
	LanguageCode *string `json:"language_code,omitempty"`
	// The country code. E.g. US
	CountryCode *string `json:"country_code,omitempty"`
}

// NewGetCurrentUserResponse200AllOfDataAllOfLanguage instantiates a new GetCurrentUserResponse200AllOfDataAllOfLanguage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCurrentUserResponse200AllOfDataAllOfLanguage() *GetCurrentUserResponse200AllOfDataAllOfLanguage {
	this := GetCurrentUserResponse200AllOfDataAllOfLanguage{}
	return &this
}

// NewGetCurrentUserResponse200AllOfDataAllOfLanguageWithDefaults instantiates a new GetCurrentUserResponse200AllOfDataAllOfLanguage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCurrentUserResponse200AllOfDataAllOfLanguageWithDefaults() *GetCurrentUserResponse200AllOfDataAllOfLanguage {
	this := GetCurrentUserResponse200AllOfDataAllOfLanguage{}
	return &this
}

// GetLanguageCode returns the LanguageCode field value if set, zero value otherwise.
func (o *GetCurrentUserResponse200AllOfDataAllOfLanguage) GetLanguageCode() string {
	if o == nil || IsNil(o.LanguageCode) {
		var ret string
		return ret
	}
	return *o.LanguageCode
}

// GetLanguageCodeOk returns a tuple with the LanguageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCurrentUserResponse200AllOfDataAllOfLanguage) GetLanguageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.LanguageCode) {
		return nil, false
	}
	return o.LanguageCode, true
}

// HasLanguageCode returns a boolean if a field has been set.
func (o *GetCurrentUserResponse200AllOfDataAllOfLanguage) HasLanguageCode() bool {
	if o != nil && !IsNil(o.LanguageCode) {
		return true
	}

	return false
}

// SetLanguageCode gets a reference to the given string and assigns it to the LanguageCode field.
func (o *GetCurrentUserResponse200AllOfDataAllOfLanguage) SetLanguageCode(v string) {
	o.LanguageCode = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *GetCurrentUserResponse200AllOfDataAllOfLanguage) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCurrentUserResponse200AllOfDataAllOfLanguage) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *GetCurrentUserResponse200AllOfDataAllOfLanguage) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *GetCurrentUserResponse200AllOfDataAllOfLanguage) SetCountryCode(v string) {
	o.CountryCode = &v
}

func (o GetCurrentUserResponse200AllOfDataAllOfLanguage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetCurrentUserResponse200AllOfDataAllOfLanguage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LanguageCode) {
		toSerialize["language_code"] = o.LanguageCode
	}
	if !IsNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	return toSerialize, nil
}

type NullableGetCurrentUserResponse200AllOfDataAllOfLanguage struct {
	value *GetCurrentUserResponse200AllOfDataAllOfLanguage
	isSet bool
}

func (v NullableGetCurrentUserResponse200AllOfDataAllOfLanguage) Get() *GetCurrentUserResponse200AllOfDataAllOfLanguage {
	return v.value
}

func (v *NullableGetCurrentUserResponse200AllOfDataAllOfLanguage) Set(val *GetCurrentUserResponse200AllOfDataAllOfLanguage) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCurrentUserResponse200AllOfDataAllOfLanguage) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCurrentUserResponse200AllOfDataAllOfLanguage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCurrentUserResponse200AllOfDataAllOfLanguage(val *GetCurrentUserResponse200AllOfDataAllOfLanguage) *NullableGetCurrentUserResponse200AllOfDataAllOfLanguage {
	return &NullableGetCurrentUserResponse200AllOfDataAllOfLanguage{value: val, isSet: true}
}

func (v NullableGetCurrentUserResponse200AllOfDataAllOfLanguage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCurrentUserResponse200AllOfDataAllOfLanguage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


