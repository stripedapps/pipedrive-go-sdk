/*
Pipedrive API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PersonItemAllOfPictureId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PersonItemAllOfPictureId{}

// PersonItemAllOfPictureId struct for PersonItemAllOfPictureId
type PersonItemAllOfPictureId struct {
	// The ID of the picture associated with the item
	Id *int32 `json:"id,omitempty"`
	// The type of item the picture is related to
	ItemType *string `json:"item_type,omitempty"`
	// The ID of related item
	ItemId *int32 `json:"item_id,omitempty"`
	// Whether the associated picture is active or not
	ActiveFlag *bool `json:"active_flag,omitempty"`
	// The add time of the picture
	AddTime *string `json:"add_time,omitempty"`
	// The update time of the picture
	UpdateTime *string `json:"update_time,omitempty"`
	// The ID of the user who added the picture
	AddedByUserId *int32 `json:"added_by_user_id,omitempty"`
	Pictures *PersonItemAllOfPictureIdAllOfPictures `json:"pictures,omitempty"`
}

// NewPersonItemAllOfPictureId instantiates a new PersonItemAllOfPictureId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersonItemAllOfPictureId() *PersonItemAllOfPictureId {
	this := PersonItemAllOfPictureId{}
	return &this
}

// NewPersonItemAllOfPictureIdWithDefaults instantiates a new PersonItemAllOfPictureId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersonItemAllOfPictureIdWithDefaults() *PersonItemAllOfPictureId {
	this := PersonItemAllOfPictureId{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PersonItemAllOfPictureId) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonItemAllOfPictureId) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PersonItemAllOfPictureId) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PersonItemAllOfPictureId) SetId(v int32) {
	o.Id = &v
}

// GetItemType returns the ItemType field value if set, zero value otherwise.
func (o *PersonItemAllOfPictureId) GetItemType() string {
	if o == nil || IsNil(o.ItemType) {
		var ret string
		return ret
	}
	return *o.ItemType
}

// GetItemTypeOk returns a tuple with the ItemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonItemAllOfPictureId) GetItemTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ItemType) {
		return nil, false
	}
	return o.ItemType, true
}

// HasItemType returns a boolean if a field has been set.
func (o *PersonItemAllOfPictureId) HasItemType() bool {
	if o != nil && !IsNil(o.ItemType) {
		return true
	}

	return false
}

// SetItemType gets a reference to the given string and assigns it to the ItemType field.
func (o *PersonItemAllOfPictureId) SetItemType(v string) {
	o.ItemType = &v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *PersonItemAllOfPictureId) GetItemId() int32 {
	if o == nil || IsNil(o.ItemId) {
		var ret int32
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonItemAllOfPictureId) GetItemIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ItemId) {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *PersonItemAllOfPictureId) HasItemId() bool {
	if o != nil && !IsNil(o.ItemId) {
		return true
	}

	return false
}

// SetItemId gets a reference to the given int32 and assigns it to the ItemId field.
func (o *PersonItemAllOfPictureId) SetItemId(v int32) {
	o.ItemId = &v
}

// GetActiveFlag returns the ActiveFlag field value if set, zero value otherwise.
func (o *PersonItemAllOfPictureId) GetActiveFlag() bool {
	if o == nil || IsNil(o.ActiveFlag) {
		var ret bool
		return ret
	}
	return *o.ActiveFlag
}

// GetActiveFlagOk returns a tuple with the ActiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonItemAllOfPictureId) GetActiveFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.ActiveFlag) {
		return nil, false
	}
	return o.ActiveFlag, true
}

// HasActiveFlag returns a boolean if a field has been set.
func (o *PersonItemAllOfPictureId) HasActiveFlag() bool {
	if o != nil && !IsNil(o.ActiveFlag) {
		return true
	}

	return false
}

// SetActiveFlag gets a reference to the given bool and assigns it to the ActiveFlag field.
func (o *PersonItemAllOfPictureId) SetActiveFlag(v bool) {
	o.ActiveFlag = &v
}

// GetAddTime returns the AddTime field value if set, zero value otherwise.
func (o *PersonItemAllOfPictureId) GetAddTime() string {
	if o == nil || IsNil(o.AddTime) {
		var ret string
		return ret
	}
	return *o.AddTime
}

// GetAddTimeOk returns a tuple with the AddTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonItemAllOfPictureId) GetAddTimeOk() (*string, bool) {
	if o == nil || IsNil(o.AddTime) {
		return nil, false
	}
	return o.AddTime, true
}

// HasAddTime returns a boolean if a field has been set.
func (o *PersonItemAllOfPictureId) HasAddTime() bool {
	if o != nil && !IsNil(o.AddTime) {
		return true
	}

	return false
}

// SetAddTime gets a reference to the given string and assigns it to the AddTime field.
func (o *PersonItemAllOfPictureId) SetAddTime(v string) {
	o.AddTime = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *PersonItemAllOfPictureId) GetUpdateTime() string {
	if o == nil || IsNil(o.UpdateTime) {
		var ret string
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonItemAllOfPictureId) GetUpdateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateTime) {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *PersonItemAllOfPictureId) HasUpdateTime() bool {
	if o != nil && !IsNil(o.UpdateTime) {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given string and assigns it to the UpdateTime field.
func (o *PersonItemAllOfPictureId) SetUpdateTime(v string) {
	o.UpdateTime = &v
}

// GetAddedByUserId returns the AddedByUserId field value if set, zero value otherwise.
func (o *PersonItemAllOfPictureId) GetAddedByUserId() int32 {
	if o == nil || IsNil(o.AddedByUserId) {
		var ret int32
		return ret
	}
	return *o.AddedByUserId
}

// GetAddedByUserIdOk returns a tuple with the AddedByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonItemAllOfPictureId) GetAddedByUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AddedByUserId) {
		return nil, false
	}
	return o.AddedByUserId, true
}

// HasAddedByUserId returns a boolean if a field has been set.
func (o *PersonItemAllOfPictureId) HasAddedByUserId() bool {
	if o != nil && !IsNil(o.AddedByUserId) {
		return true
	}

	return false
}

// SetAddedByUserId gets a reference to the given int32 and assigns it to the AddedByUserId field.
func (o *PersonItemAllOfPictureId) SetAddedByUserId(v int32) {
	o.AddedByUserId = &v
}

// GetPictures returns the Pictures field value if set, zero value otherwise.
func (o *PersonItemAllOfPictureId) GetPictures() PersonItemAllOfPictureIdAllOfPictures {
	if o == nil || IsNil(o.Pictures) {
		var ret PersonItemAllOfPictureIdAllOfPictures
		return ret
	}
	return *o.Pictures
}

// GetPicturesOk returns a tuple with the Pictures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PersonItemAllOfPictureId) GetPicturesOk() (*PersonItemAllOfPictureIdAllOfPictures, bool) {
	if o == nil || IsNil(o.Pictures) {
		return nil, false
	}
	return o.Pictures, true
}

// HasPictures returns a boolean if a field has been set.
func (o *PersonItemAllOfPictureId) HasPictures() bool {
	if o != nil && !IsNil(o.Pictures) {
		return true
	}

	return false
}

// SetPictures gets a reference to the given PersonItemAllOfPictureIdAllOfPictures and assigns it to the Pictures field.
func (o *PersonItemAllOfPictureId) SetPictures(v PersonItemAllOfPictureIdAllOfPictures) {
	o.Pictures = &v
}

func (o PersonItemAllOfPictureId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PersonItemAllOfPictureId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ItemType) {
		toSerialize["item_type"] = o.ItemType
	}
	if !IsNil(o.ItemId) {
		toSerialize["item_id"] = o.ItemId
	}
	if !IsNil(o.ActiveFlag) {
		toSerialize["active_flag"] = o.ActiveFlag
	}
	if !IsNil(o.AddTime) {
		toSerialize["add_time"] = o.AddTime
	}
	if !IsNil(o.UpdateTime) {
		toSerialize["update_time"] = o.UpdateTime
	}
	if !IsNil(o.AddedByUserId) {
		toSerialize["added_by_user_id"] = o.AddedByUserId
	}
	if !IsNil(o.Pictures) {
		toSerialize["pictures"] = o.Pictures
	}
	return toSerialize, nil
}

type NullablePersonItemAllOfPictureId struct {
	value *PersonItemAllOfPictureId
	isSet bool
}

func (v NullablePersonItemAllOfPictureId) Get() *PersonItemAllOfPictureId {
	return v.value
}

func (v *NullablePersonItemAllOfPictureId) Set(val *PersonItemAllOfPictureId) {
	v.value = val
	v.isSet = true
}

func (v NullablePersonItemAllOfPictureId) IsSet() bool {
	return v.isSet
}

func (v *NullablePersonItemAllOfPictureId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersonItemAllOfPictureId(val *PersonItemAllOfPictureId) *NullablePersonItemAllOfPictureId {
	return &NullablePersonItemAllOfPictureId{value: val, isSet: true}
}

func (v NullablePersonItemAllOfPictureId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersonItemAllOfPictureId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


