/*
Pipedrive API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AddGoalRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddGoalRequest{}

// AddGoalRequest struct for AddGoalRequest
type AddGoalRequest struct {
	// The title of the goal
	Title *string `json:"title,omitempty"`
	// Who this goal is assigned to. It requires the following JSON structure: `{ \"id\": \"1\", \"type\": \"person\" }`. `type` can be either `person`, `company` or `team`. ID of the assignee person, company or team.
	Assignee map[string]interface{} `json:"assignee"`
	// The type of the goal. It requires the following JSON structure: `{ \"name\": \"deals_started\", \"params\": { \"pipeline_id\": [1, 2], \"activity_type_id\": [9] } }`. Type can be one of: `deals_won`, `deals_progressed`, `activities_completed`, `activities_added`, `deals_started` or `revenue_forecast`. `params` can include `pipeline_id`, `stage_id` or `activity_type_id`. `stage_id` is related to only `deals_progressed` type of goals and `activity_type_id` to `activities_completed` or `activities_added` types of goals. The `pipeline_id` and `activity_type_id` need to be given as an array of integers. To track the goal in all pipelines, set `pipeline_id` as `null` and similarly, to track the goal for all activities, set `activity_type_id` as `null`.‚Äù
	Type map[string]interface{} `json:"type"`
	// The expected outcome of the goal. Expected outcome can be tracked either by `quantity` or by `sum`. It requires the following JSON structure: `{ \"target\": \"50\", \"tracking_metric\": \"quantity\" }` or `{ \"target\": \"50\", \"tracking_metric\": \"sum\", \"currency_id\": 1 }`. `currency_id` should only be added to `sum` type of goals.
	ExpectedOutcome map[string]interface{} `json:"expected_outcome"`
	// The date when the goal starts and ends. It requires the following JSON structure: `{ \"start\": \"2019-01-01\", \"end\": \"2022-12-31\" }`. Date in format of YYYY-MM-DD. \"end\" can be set to `null` for an infinite, open-ended goal.
	Duration map[string]interface{} `json:"duration"`
	// The interval of the goal
	Interval string `json:"interval"`
}

// NewAddGoalRequest instantiates a new AddGoalRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddGoalRequest(assignee map[string]interface{}, type_ map[string]interface{}, expectedOutcome map[string]interface{}, duration map[string]interface{}, interval string) *AddGoalRequest {
	this := AddGoalRequest{}
	this.Assignee = assignee
	this.Type = type_
	this.ExpectedOutcome = expectedOutcome
	this.Duration = duration
	this.Interval = interval
	return &this
}

// NewAddGoalRequestWithDefaults instantiates a new AddGoalRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddGoalRequestWithDefaults() *AddGoalRequest {
	this := AddGoalRequest{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *AddGoalRequest) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddGoalRequest) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *AddGoalRequest) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *AddGoalRequest) SetTitle(v string) {
	o.Title = &v
}

// GetAssignee returns the Assignee field value
func (o *AddGoalRequest) GetAssignee() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Assignee
}

// GetAssigneeOk returns a tuple with the Assignee field value
// and a boolean to check if the value has been set.
func (o *AddGoalRequest) GetAssigneeOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Assignee, true
}

// SetAssignee sets field value
func (o *AddGoalRequest) SetAssignee(v map[string]interface{}) {
	o.Assignee = v
}

// GetType returns the Type field value
func (o *AddGoalRequest) GetType() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AddGoalRequest) GetTypeOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Type, true
}

// SetType sets field value
func (o *AddGoalRequest) SetType(v map[string]interface{}) {
	o.Type = v
}

// GetExpectedOutcome returns the ExpectedOutcome field value
func (o *AddGoalRequest) GetExpectedOutcome() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.ExpectedOutcome
}

// GetExpectedOutcomeOk returns a tuple with the ExpectedOutcome field value
// and a boolean to check if the value has been set.
func (o *AddGoalRequest) GetExpectedOutcomeOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.ExpectedOutcome, true
}

// SetExpectedOutcome sets field value
func (o *AddGoalRequest) SetExpectedOutcome(v map[string]interface{}) {
	o.ExpectedOutcome = v
}

// GetDuration returns the Duration field value
func (o *AddGoalRequest) GetDuration() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *AddGoalRequest) GetDurationOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Duration, true
}

// SetDuration sets field value
func (o *AddGoalRequest) SetDuration(v map[string]interface{}) {
	o.Duration = v
}

// GetInterval returns the Interval field value
func (o *AddGoalRequest) GetInterval() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value
// and a boolean to check if the value has been set.
func (o *AddGoalRequest) GetIntervalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interval, true
}

// SetInterval sets field value
func (o *AddGoalRequest) SetInterval(v string) {
	o.Interval = v
}

func (o AddGoalRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddGoalRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	toSerialize["assignee"] = o.Assignee
	toSerialize["type"] = o.Type
	toSerialize["expected_outcome"] = o.ExpectedOutcome
	toSerialize["duration"] = o.Duration
	toSerialize["interval"] = o.Interval
	return toSerialize, nil
}

type NullableAddGoalRequest struct {
	value *AddGoalRequest
	isSet bool
}

func (v NullableAddGoalRequest) Get() *AddGoalRequest {
	return v.value
}

func (v *NullableAddGoalRequest) Set(val *AddGoalRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddGoalRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddGoalRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddGoalRequest(val *AddGoalRequest) *NullableAddGoalRequest {
	return &NullableAddGoalRequest{value: val, isSet: true}
}

func (v NullableAddGoalRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddGoalRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


