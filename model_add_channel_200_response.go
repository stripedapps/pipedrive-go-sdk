/*
Pipedrive API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AddChannel200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddChannel200Response{}

// AddChannel200Response struct for AddChannel200Response
type AddChannel200Response struct {
	Success *bool `json:"success,omitempty"`
	Data *AddChannel200ResponseData `json:"data,omitempty"`
}

// NewAddChannel200Response instantiates a new AddChannel200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddChannel200Response() *AddChannel200Response {
	this := AddChannel200Response{}
	return &this
}

// NewAddChannel200ResponseWithDefaults instantiates a new AddChannel200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddChannel200ResponseWithDefaults() *AddChannel200Response {
	this := AddChannel200Response{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *AddChannel200Response) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddChannel200Response) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *AddChannel200Response) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *AddChannel200Response) SetSuccess(v bool) {
	o.Success = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *AddChannel200Response) GetData() AddChannel200ResponseData {
	if o == nil || IsNil(o.Data) {
		var ret AddChannel200ResponseData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddChannel200Response) GetDataOk() (*AddChannel200ResponseData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *AddChannel200Response) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given AddChannel200ResponseData and assigns it to the Data field.
func (o *AddChannel200Response) SetData(v AddChannel200ResponseData) {
	o.Data = &v
}

func (o AddChannel200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddChannel200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableAddChannel200Response struct {
	value *AddChannel200Response
	isSet bool
}

func (v NullableAddChannel200Response) Get() *AddChannel200Response {
	return v.value
}

func (v *NullableAddChannel200Response) Set(val *AddChannel200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAddChannel200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAddChannel200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddChannel200Response(val *AddChannel200Response) *NullableAddChannel200Response {
	return &NullableAddChannel200Response{value: val, isSet: true}
}

func (v NullableAddChannel200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddChannel200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


