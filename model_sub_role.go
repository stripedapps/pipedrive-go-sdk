/*
Pipedrive API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SubRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubRole{}

// SubRole The details of the sub-role
type SubRole struct {
	// The ID of the parent role
	ParentRoleId *int32 `json:"parent_role_id,omitempty"`
	// The name of the role
	Name *string `json:"name,omitempty"`
	// The ID of the role
	Id *int32 `json:"id,omitempty"`
	// Whether the role is active or not
	ActiveFlag *bool `json:"active_flag,omitempty"`
	// The number of users assigned to this role
	AssignmentCount *string `json:"assignment_count,omitempty"`
	// The number of sub-roles
	SubRoleCount *string `json:"sub_role_count,omitempty"`
}

// NewSubRole instantiates a new SubRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubRole() *SubRole {
	this := SubRole{}
	return &this
}

// NewSubRoleWithDefaults instantiates a new SubRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubRoleWithDefaults() *SubRole {
	this := SubRole{}
	return &this
}

// GetParentRoleId returns the ParentRoleId field value if set, zero value otherwise.
func (o *SubRole) GetParentRoleId() int32 {
	if o == nil || IsNil(o.ParentRoleId) {
		var ret int32
		return ret
	}
	return *o.ParentRoleId
}

// GetParentRoleIdOk returns a tuple with the ParentRoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubRole) GetParentRoleIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ParentRoleId) {
		return nil, false
	}
	return o.ParentRoleId, true
}

// HasParentRoleId returns a boolean if a field has been set.
func (o *SubRole) HasParentRoleId() bool {
	if o != nil && !IsNil(o.ParentRoleId) {
		return true
	}

	return false
}

// SetParentRoleId gets a reference to the given int32 and assigns it to the ParentRoleId field.
func (o *SubRole) SetParentRoleId(v int32) {
	o.ParentRoleId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SubRole) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubRole) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SubRole) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SubRole) SetName(v string) {
	o.Name = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubRole) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubRole) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubRole) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SubRole) SetId(v int32) {
	o.Id = &v
}

// GetActiveFlag returns the ActiveFlag field value if set, zero value otherwise.
func (o *SubRole) GetActiveFlag() bool {
	if o == nil || IsNil(o.ActiveFlag) {
		var ret bool
		return ret
	}
	return *o.ActiveFlag
}

// GetActiveFlagOk returns a tuple with the ActiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubRole) GetActiveFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.ActiveFlag) {
		return nil, false
	}
	return o.ActiveFlag, true
}

// HasActiveFlag returns a boolean if a field has been set.
func (o *SubRole) HasActiveFlag() bool {
	if o != nil && !IsNil(o.ActiveFlag) {
		return true
	}

	return false
}

// SetActiveFlag gets a reference to the given bool and assigns it to the ActiveFlag field.
func (o *SubRole) SetActiveFlag(v bool) {
	o.ActiveFlag = &v
}

// GetAssignmentCount returns the AssignmentCount field value if set, zero value otherwise.
func (o *SubRole) GetAssignmentCount() string {
	if o == nil || IsNil(o.AssignmentCount) {
		var ret string
		return ret
	}
	return *o.AssignmentCount
}

// GetAssignmentCountOk returns a tuple with the AssignmentCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubRole) GetAssignmentCountOk() (*string, bool) {
	if o == nil || IsNil(o.AssignmentCount) {
		return nil, false
	}
	return o.AssignmentCount, true
}

// HasAssignmentCount returns a boolean if a field has been set.
func (o *SubRole) HasAssignmentCount() bool {
	if o != nil && !IsNil(o.AssignmentCount) {
		return true
	}

	return false
}

// SetAssignmentCount gets a reference to the given string and assigns it to the AssignmentCount field.
func (o *SubRole) SetAssignmentCount(v string) {
	o.AssignmentCount = &v
}

// GetSubRoleCount returns the SubRoleCount field value if set, zero value otherwise.
func (o *SubRole) GetSubRoleCount() string {
	if o == nil || IsNil(o.SubRoleCount) {
		var ret string
		return ret
	}
	return *o.SubRoleCount
}

// GetSubRoleCountOk returns a tuple with the SubRoleCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubRole) GetSubRoleCountOk() (*string, bool) {
	if o == nil || IsNil(o.SubRoleCount) {
		return nil, false
	}
	return o.SubRoleCount, true
}

// HasSubRoleCount returns a boolean if a field has been set.
func (o *SubRole) HasSubRoleCount() bool {
	if o != nil && !IsNil(o.SubRoleCount) {
		return true
	}

	return false
}

// SetSubRoleCount gets a reference to the given string and assigns it to the SubRoleCount field.
func (o *SubRole) SetSubRoleCount(v string) {
	o.SubRoleCount = &v
}

func (o SubRole) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ParentRoleId) {
		toSerialize["parent_role_id"] = o.ParentRoleId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ActiveFlag) {
		toSerialize["active_flag"] = o.ActiveFlag
	}
	if !IsNil(o.AssignmentCount) {
		toSerialize["assignment_count"] = o.AssignmentCount
	}
	if !IsNil(o.SubRoleCount) {
		toSerialize["sub_role_count"] = o.SubRoleCount
	}
	return toSerialize, nil
}

type NullableSubRole struct {
	value *SubRole
	isSet bool
}

func (v NullableSubRole) Get() *SubRole {
	return v.value
}

func (v *NullableSubRole) Set(val *SubRole) {
	v.value = val
	v.isSet = true
}

func (v NullableSubRole) IsSet() bool {
	return v.isSet
}

func (v *NullableSubRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubRole(val *SubRole) *NullableSubRole {
	return &NullableSubRole{value: val, isSet: true}
}

func (v NullableSubRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


