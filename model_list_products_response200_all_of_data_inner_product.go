/*
Pipedrive API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ListProductsResponse200AllOfDataInnerProduct type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListProductsResponse200AllOfDataInnerProduct{}

// ListProductsResponse200AllOfDataInnerProduct struct for ListProductsResponse200AllOfDataInnerProduct
type ListProductsResponse200AllOfDataInnerProduct struct {
	// The ID of the product
	Id *float32 `json:"id,omitempty"`
	// The name of the product
	Name *string `json:"name,omitempty"`
	// The product code
	Code *string `json:"code,omitempty"`
	// The unit in which this product is sold
	Unit *string `json:"unit,omitempty"`
	// The tax percentage
	Tax *float32 `json:"tax,omitempty"`
	// Whether this product is active or not
	ActiveFlag *bool `json:"active_flag,omitempty"`
	// Whether this product is selected in deals or not
	Selectable *bool `json:"selectable,omitempty"`
	VisibleTo *string `json:"visible_to,omitempty"`
	// Information about the Pipedrive user who owns the product
	OwnerId map[string]interface{} `json:"owner_id,omitempty"`
	// Only available in Advanced and above plans  How often a customer is billed for access to a service or product 
	BillingFrequency *string `json:"billing_frequency,omitempty"`
	// Only available in Advanced and above plans  The number of times the billing frequency repeats for a product in a deal  When `billing_frequency` is set to `one-time`, this field is always `null`  For all the other values of `billing_frequency`, `null` represents a product billed indefinitely  Must be a positive integer less or equal to 312 
	BillingFrequencyCycles NullableInt32 `json:"billing_frequency_cycles,omitempty"`
	// Array of objects, each containing: currency (string), price (number), cost (number, optional), overhead_cost (number, optional)
	Prices []map[string]interface{} `json:"prices,omitempty"`
}

// NewListProductsResponse200AllOfDataInnerProduct instantiates a new ListProductsResponse200AllOfDataInnerProduct object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListProductsResponse200AllOfDataInnerProduct() *ListProductsResponse200AllOfDataInnerProduct {
	this := ListProductsResponse200AllOfDataInnerProduct{}
	var tax float32 = 0
	this.Tax = &tax
	var activeFlag bool = true
	this.ActiveFlag = &activeFlag
	var selectable bool = true
	this.Selectable = &selectable
	var billingFrequency string = "one-time"
	this.BillingFrequency = &billingFrequency
	return &this
}

// NewListProductsResponse200AllOfDataInnerProductWithDefaults instantiates a new ListProductsResponse200AllOfDataInnerProduct object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListProductsResponse200AllOfDataInnerProductWithDefaults() *ListProductsResponse200AllOfDataInnerProduct {
	this := ListProductsResponse200AllOfDataInnerProduct{}
	var tax float32 = 0
	this.Tax = &tax
	var activeFlag bool = true
	this.ActiveFlag = &activeFlag
	var selectable bool = true
	this.Selectable = &selectable
	var billingFrequency string = "one-time"
	this.BillingFrequency = &billingFrequency
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ListProductsResponse200AllOfDataInnerProduct) GetId() float32 {
	if o == nil || IsNil(o.Id) {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListProductsResponse200AllOfDataInnerProduct) GetIdOk() (*float32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ListProductsResponse200AllOfDataInnerProduct) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *ListProductsResponse200AllOfDataInnerProduct) SetId(v float32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ListProductsResponse200AllOfDataInnerProduct) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListProductsResponse200AllOfDataInnerProduct) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ListProductsResponse200AllOfDataInnerProduct) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ListProductsResponse200AllOfDataInnerProduct) SetName(v string) {
	o.Name = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ListProductsResponse200AllOfDataInnerProduct) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListProductsResponse200AllOfDataInnerProduct) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ListProductsResponse200AllOfDataInnerProduct) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ListProductsResponse200AllOfDataInnerProduct) SetCode(v string) {
	o.Code = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *ListProductsResponse200AllOfDataInnerProduct) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListProductsResponse200AllOfDataInnerProduct) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *ListProductsResponse200AllOfDataInnerProduct) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *ListProductsResponse200AllOfDataInnerProduct) SetUnit(v string) {
	o.Unit = &v
}

// GetTax returns the Tax field value if set, zero value otherwise.
func (o *ListProductsResponse200AllOfDataInnerProduct) GetTax() float32 {
	if o == nil || IsNil(o.Tax) {
		var ret float32
		return ret
	}
	return *o.Tax
}

// GetTaxOk returns a tuple with the Tax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListProductsResponse200AllOfDataInnerProduct) GetTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.Tax) {
		return nil, false
	}
	return o.Tax, true
}

// HasTax returns a boolean if a field has been set.
func (o *ListProductsResponse200AllOfDataInnerProduct) HasTax() bool {
	if o != nil && !IsNil(o.Tax) {
		return true
	}

	return false
}

// SetTax gets a reference to the given float32 and assigns it to the Tax field.
func (o *ListProductsResponse200AllOfDataInnerProduct) SetTax(v float32) {
	o.Tax = &v
}

// GetActiveFlag returns the ActiveFlag field value if set, zero value otherwise.
func (o *ListProductsResponse200AllOfDataInnerProduct) GetActiveFlag() bool {
	if o == nil || IsNil(o.ActiveFlag) {
		var ret bool
		return ret
	}
	return *o.ActiveFlag
}

// GetActiveFlagOk returns a tuple with the ActiveFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListProductsResponse200AllOfDataInnerProduct) GetActiveFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.ActiveFlag) {
		return nil, false
	}
	return o.ActiveFlag, true
}

// HasActiveFlag returns a boolean if a field has been set.
func (o *ListProductsResponse200AllOfDataInnerProduct) HasActiveFlag() bool {
	if o != nil && !IsNil(o.ActiveFlag) {
		return true
	}

	return false
}

// SetActiveFlag gets a reference to the given bool and assigns it to the ActiveFlag field.
func (o *ListProductsResponse200AllOfDataInnerProduct) SetActiveFlag(v bool) {
	o.ActiveFlag = &v
}

// GetSelectable returns the Selectable field value if set, zero value otherwise.
func (o *ListProductsResponse200AllOfDataInnerProduct) GetSelectable() bool {
	if o == nil || IsNil(o.Selectable) {
		var ret bool
		return ret
	}
	return *o.Selectable
}

// GetSelectableOk returns a tuple with the Selectable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListProductsResponse200AllOfDataInnerProduct) GetSelectableOk() (*bool, bool) {
	if o == nil || IsNil(o.Selectable) {
		return nil, false
	}
	return o.Selectable, true
}

// HasSelectable returns a boolean if a field has been set.
func (o *ListProductsResponse200AllOfDataInnerProduct) HasSelectable() bool {
	if o != nil && !IsNil(o.Selectable) {
		return true
	}

	return false
}

// SetSelectable gets a reference to the given bool and assigns it to the Selectable field.
func (o *ListProductsResponse200AllOfDataInnerProduct) SetSelectable(v bool) {
	o.Selectable = &v
}

// GetVisibleTo returns the VisibleTo field value if set, zero value otherwise.
func (o *ListProductsResponse200AllOfDataInnerProduct) GetVisibleTo() string {
	if o == nil || IsNil(o.VisibleTo) {
		var ret string
		return ret
	}
	return *o.VisibleTo
}

// GetVisibleToOk returns a tuple with the VisibleTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListProductsResponse200AllOfDataInnerProduct) GetVisibleToOk() (*string, bool) {
	if o == nil || IsNil(o.VisibleTo) {
		return nil, false
	}
	return o.VisibleTo, true
}

// HasVisibleTo returns a boolean if a field has been set.
func (o *ListProductsResponse200AllOfDataInnerProduct) HasVisibleTo() bool {
	if o != nil && !IsNil(o.VisibleTo) {
		return true
	}

	return false
}

// SetVisibleTo gets a reference to the given string and assigns it to the VisibleTo field.
func (o *ListProductsResponse200AllOfDataInnerProduct) SetVisibleTo(v string) {
	o.VisibleTo = &v
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise.
func (o *ListProductsResponse200AllOfDataInnerProduct) GetOwnerId() map[string]interface{} {
	if o == nil || IsNil(o.OwnerId) {
		var ret map[string]interface{}
		return ret
	}
	return o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListProductsResponse200AllOfDataInnerProduct) GetOwnerIdOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.OwnerId) {
		return map[string]interface{}{}, false
	}
	return o.OwnerId, true
}

// HasOwnerId returns a boolean if a field has been set.
func (o *ListProductsResponse200AllOfDataInnerProduct) HasOwnerId() bool {
	if o != nil && !IsNil(o.OwnerId) {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given map[string]interface{} and assigns it to the OwnerId field.
func (o *ListProductsResponse200AllOfDataInnerProduct) SetOwnerId(v map[string]interface{}) {
	o.OwnerId = v
}

// GetBillingFrequency returns the BillingFrequency field value if set, zero value otherwise.
func (o *ListProductsResponse200AllOfDataInnerProduct) GetBillingFrequency() string {
	if o == nil || IsNil(o.BillingFrequency) {
		var ret string
		return ret
	}
	return *o.BillingFrequency
}

// GetBillingFrequencyOk returns a tuple with the BillingFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListProductsResponse200AllOfDataInnerProduct) GetBillingFrequencyOk() (*string, bool) {
	if o == nil || IsNil(o.BillingFrequency) {
		return nil, false
	}
	return o.BillingFrequency, true
}

// HasBillingFrequency returns a boolean if a field has been set.
func (o *ListProductsResponse200AllOfDataInnerProduct) HasBillingFrequency() bool {
	if o != nil && !IsNil(o.BillingFrequency) {
		return true
	}

	return false
}

// SetBillingFrequency gets a reference to the given string and assigns it to the BillingFrequency field.
func (o *ListProductsResponse200AllOfDataInnerProduct) SetBillingFrequency(v string) {
	o.BillingFrequency = &v
}

// GetBillingFrequencyCycles returns the BillingFrequencyCycles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListProductsResponse200AllOfDataInnerProduct) GetBillingFrequencyCycles() int32 {
	if o == nil || IsNil(o.BillingFrequencyCycles.Get()) {
		var ret int32
		return ret
	}
	return *o.BillingFrequencyCycles.Get()
}

// GetBillingFrequencyCyclesOk returns a tuple with the BillingFrequencyCycles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListProductsResponse200AllOfDataInnerProduct) GetBillingFrequencyCyclesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BillingFrequencyCycles.Get(), o.BillingFrequencyCycles.IsSet()
}

// HasBillingFrequencyCycles returns a boolean if a field has been set.
func (o *ListProductsResponse200AllOfDataInnerProduct) HasBillingFrequencyCycles() bool {
	if o != nil && o.BillingFrequencyCycles.IsSet() {
		return true
	}

	return false
}

// SetBillingFrequencyCycles gets a reference to the given NullableInt32 and assigns it to the BillingFrequencyCycles field.
func (o *ListProductsResponse200AllOfDataInnerProduct) SetBillingFrequencyCycles(v int32) {
	o.BillingFrequencyCycles.Set(&v)
}
// SetBillingFrequencyCyclesNil sets the value for BillingFrequencyCycles to be an explicit nil
func (o *ListProductsResponse200AllOfDataInnerProduct) SetBillingFrequencyCyclesNil() {
	o.BillingFrequencyCycles.Set(nil)
}

// UnsetBillingFrequencyCycles ensures that no value is present for BillingFrequencyCycles, not even an explicit nil
func (o *ListProductsResponse200AllOfDataInnerProduct) UnsetBillingFrequencyCycles() {
	o.BillingFrequencyCycles.Unset()
}

// GetPrices returns the Prices field value if set, zero value otherwise.
func (o *ListProductsResponse200AllOfDataInnerProduct) GetPrices() []map[string]interface{} {
	if o == nil || IsNil(o.Prices) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Prices
}

// GetPricesOk returns a tuple with the Prices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListProductsResponse200AllOfDataInnerProduct) GetPricesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Prices) {
		return nil, false
	}
	return o.Prices, true
}

// HasPrices returns a boolean if a field has been set.
func (o *ListProductsResponse200AllOfDataInnerProduct) HasPrices() bool {
	if o != nil && !IsNil(o.Prices) {
		return true
	}

	return false
}

// SetPrices gets a reference to the given []map[string]interface{} and assigns it to the Prices field.
func (o *ListProductsResponse200AllOfDataInnerProduct) SetPrices(v []map[string]interface{}) {
	o.Prices = v
}

func (o ListProductsResponse200AllOfDataInnerProduct) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListProductsResponse200AllOfDataInnerProduct) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !IsNil(o.Tax) {
		toSerialize["tax"] = o.Tax
	}
	if !IsNil(o.ActiveFlag) {
		toSerialize["active_flag"] = o.ActiveFlag
	}
	if !IsNil(o.Selectable) {
		toSerialize["selectable"] = o.Selectable
	}
	if !IsNil(o.VisibleTo) {
		toSerialize["visible_to"] = o.VisibleTo
	}
	if !IsNil(o.OwnerId) {
		toSerialize["owner_id"] = o.OwnerId
	}
	if !IsNil(o.BillingFrequency) {
		toSerialize["billing_frequency"] = o.BillingFrequency
	}
	if o.BillingFrequencyCycles.IsSet() {
		toSerialize["billing_frequency_cycles"] = o.BillingFrequencyCycles.Get()
	}
	if !IsNil(o.Prices) {
		toSerialize["prices"] = o.Prices
	}
	return toSerialize, nil
}

type NullableListProductsResponse200AllOfDataInnerProduct struct {
	value *ListProductsResponse200AllOfDataInnerProduct
	isSet bool
}

func (v NullableListProductsResponse200AllOfDataInnerProduct) Get() *ListProductsResponse200AllOfDataInnerProduct {
	return v.value
}

func (v *NullableListProductsResponse200AllOfDataInnerProduct) Set(val *ListProductsResponse200AllOfDataInnerProduct) {
	v.value = val
	v.isSet = true
}

func (v NullableListProductsResponse200AllOfDataInnerProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableListProductsResponse200AllOfDataInnerProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListProductsResponse200AllOfDataInnerProduct(val *ListProductsResponse200AllOfDataInnerProduct) *NullableListProductsResponse200AllOfDataInnerProduct {
	return &NullableListProductsResponse200AllOfDataInnerProduct{value: val, isSet: true}
}

func (v NullableListProductsResponse200AllOfDataInnerProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListProductsResponse200AllOfDataInnerProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


