/*
Pipedrive API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CommentPostPutObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommentPostPutObject{}

// CommentPostPutObject struct for CommentPostPutObject
type CommentPostPutObject struct {
	// The content of the comment in HTML format. Subject to sanitization on the back-end.
	Content string `json:"content"`
}

// NewCommentPostPutObject instantiates a new CommentPostPutObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentPostPutObject(content string) *CommentPostPutObject {
	this := CommentPostPutObject{}
	this.Content = content
	return &this
}

// NewCommentPostPutObjectWithDefaults instantiates a new CommentPostPutObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentPostPutObjectWithDefaults() *CommentPostPutObject {
	this := CommentPostPutObject{}
	return &this
}

// GetContent returns the Content field value
func (o *CommentPostPutObject) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *CommentPostPutObject) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *CommentPostPutObject) SetContent(v string) {
	o.Content = v
}

func (o CommentPostPutObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommentPostPutObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["content"] = o.Content
	return toSerialize, nil
}

type NullableCommentPostPutObject struct {
	value *CommentPostPutObject
	isSet bool
}

func (v NullableCommentPostPutObject) Get() *CommentPostPutObject {
	return v.value
}

func (v *NullableCommentPostPutObject) Set(val *CommentPostPutObject) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentPostPutObject) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentPostPutObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentPostPutObject(val *CommentPostPutObject) *NullableCommentPostPutObject {
	return &NullableCommentPostPutObject{value: val, isSet: true}
}

func (v NullableCommentPostPutObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentPostPutObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


