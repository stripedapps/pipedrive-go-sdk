/*
Pipedrive API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AddRecurringSubscriptionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddRecurringSubscriptionRequest{}

// AddRecurringSubscriptionRequest struct for AddRecurringSubscriptionRequest
type AddRecurringSubscriptionRequest struct {
	// The ID of the deal this recurring subscription is associated with
	DealId int32 `json:"deal_id"`
	// The currency of the recurring subscription. Accepts a 3-character currency code.
	Currency string `json:"currency"`
	// The description of the recurring subscription
	Description *string `json:"description,omitempty"`
	// The interval between payments
	CadenceType string `json:"cadence_type"`
	// Shows how many payments the subscription has. Note that one field must be set: `cycles_count` or `infinite`. If `cycles_count` is set, then `cycle_amount` and `start_date` are also required.
	CyclesCount *int32 `json:"cycles_count,omitempty"`
	// The amount of each payment
	CycleAmount int32 `json:"cycle_amount"`
	// The start date of the recurring subscription. Format: YYYY-MM-DD
	StartDate string `json:"start_date"`
	// This indicates that the recurring subscription will last until it's manually canceled or deleted. Note that only one field must be set: `cycles_count` or `infinite`.
	Infinite *bool `json:"infinite,omitempty"`
	// Array of additional payments. It requires a minimum structure as follows: [{ amount:SUM, description:DESCRIPTION, due_at:PAYMENT_DATE }]. Replace SUM with a payment amount, DESCRIPTION with an explanation string, PAYMENT_DATE with a date (format YYYY-MM-DD).
	Payments []map[string]interface{} `json:"payments,omitempty"`
	// Indicates that the deal value must be set to recurring subscription's MRR value
	UpdateDealValue *bool `json:"update_deal_value,omitempty"`
}

// NewAddRecurringSubscriptionRequest instantiates a new AddRecurringSubscriptionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddRecurringSubscriptionRequest(dealId int32, currency string, cadenceType string, cycleAmount int32, startDate string) *AddRecurringSubscriptionRequest {
	this := AddRecurringSubscriptionRequest{}
	this.DealId = dealId
	this.Currency = currency
	this.CadenceType = cadenceType
	this.CycleAmount = cycleAmount
	this.StartDate = startDate
	return &this
}

// NewAddRecurringSubscriptionRequestWithDefaults instantiates a new AddRecurringSubscriptionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddRecurringSubscriptionRequestWithDefaults() *AddRecurringSubscriptionRequest {
	this := AddRecurringSubscriptionRequest{}
	return &this
}

// GetDealId returns the DealId field value
func (o *AddRecurringSubscriptionRequest) GetDealId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DealId
}

// GetDealIdOk returns a tuple with the DealId field value
// and a boolean to check if the value has been set.
func (o *AddRecurringSubscriptionRequest) GetDealIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DealId, true
}

// SetDealId sets field value
func (o *AddRecurringSubscriptionRequest) SetDealId(v int32) {
	o.DealId = v
}

// GetCurrency returns the Currency field value
func (o *AddRecurringSubscriptionRequest) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *AddRecurringSubscriptionRequest) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *AddRecurringSubscriptionRequest) SetCurrency(v string) {
	o.Currency = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddRecurringSubscriptionRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddRecurringSubscriptionRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddRecurringSubscriptionRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddRecurringSubscriptionRequest) SetDescription(v string) {
	o.Description = &v
}

// GetCadenceType returns the CadenceType field value
func (o *AddRecurringSubscriptionRequest) GetCadenceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CadenceType
}

// GetCadenceTypeOk returns a tuple with the CadenceType field value
// and a boolean to check if the value has been set.
func (o *AddRecurringSubscriptionRequest) GetCadenceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CadenceType, true
}

// SetCadenceType sets field value
func (o *AddRecurringSubscriptionRequest) SetCadenceType(v string) {
	o.CadenceType = v
}

// GetCyclesCount returns the CyclesCount field value if set, zero value otherwise.
func (o *AddRecurringSubscriptionRequest) GetCyclesCount() int32 {
	if o == nil || IsNil(o.CyclesCount) {
		var ret int32
		return ret
	}
	return *o.CyclesCount
}

// GetCyclesCountOk returns a tuple with the CyclesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddRecurringSubscriptionRequest) GetCyclesCountOk() (*int32, bool) {
	if o == nil || IsNil(o.CyclesCount) {
		return nil, false
	}
	return o.CyclesCount, true
}

// HasCyclesCount returns a boolean if a field has been set.
func (o *AddRecurringSubscriptionRequest) HasCyclesCount() bool {
	if o != nil && !IsNil(o.CyclesCount) {
		return true
	}

	return false
}

// SetCyclesCount gets a reference to the given int32 and assigns it to the CyclesCount field.
func (o *AddRecurringSubscriptionRequest) SetCyclesCount(v int32) {
	o.CyclesCount = &v
}

// GetCycleAmount returns the CycleAmount field value
func (o *AddRecurringSubscriptionRequest) GetCycleAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CycleAmount
}

// GetCycleAmountOk returns a tuple with the CycleAmount field value
// and a boolean to check if the value has been set.
func (o *AddRecurringSubscriptionRequest) GetCycleAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CycleAmount, true
}

// SetCycleAmount sets field value
func (o *AddRecurringSubscriptionRequest) SetCycleAmount(v int32) {
	o.CycleAmount = v
}

// GetStartDate returns the StartDate field value
func (o *AddRecurringSubscriptionRequest) GetStartDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *AddRecurringSubscriptionRequest) GetStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *AddRecurringSubscriptionRequest) SetStartDate(v string) {
	o.StartDate = v
}

// GetInfinite returns the Infinite field value if set, zero value otherwise.
func (o *AddRecurringSubscriptionRequest) GetInfinite() bool {
	if o == nil || IsNil(o.Infinite) {
		var ret bool
		return ret
	}
	return *o.Infinite
}

// GetInfiniteOk returns a tuple with the Infinite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddRecurringSubscriptionRequest) GetInfiniteOk() (*bool, bool) {
	if o == nil || IsNil(o.Infinite) {
		return nil, false
	}
	return o.Infinite, true
}

// HasInfinite returns a boolean if a field has been set.
func (o *AddRecurringSubscriptionRequest) HasInfinite() bool {
	if o != nil && !IsNil(o.Infinite) {
		return true
	}

	return false
}

// SetInfinite gets a reference to the given bool and assigns it to the Infinite field.
func (o *AddRecurringSubscriptionRequest) SetInfinite(v bool) {
	o.Infinite = &v
}

// GetPayments returns the Payments field value if set, zero value otherwise.
func (o *AddRecurringSubscriptionRequest) GetPayments() []map[string]interface{} {
	if o == nil || IsNil(o.Payments) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Payments
}

// GetPaymentsOk returns a tuple with the Payments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddRecurringSubscriptionRequest) GetPaymentsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Payments) {
		return nil, false
	}
	return o.Payments, true
}

// HasPayments returns a boolean if a field has been set.
func (o *AddRecurringSubscriptionRequest) HasPayments() bool {
	if o != nil && !IsNil(o.Payments) {
		return true
	}

	return false
}

// SetPayments gets a reference to the given []map[string]interface{} and assigns it to the Payments field.
func (o *AddRecurringSubscriptionRequest) SetPayments(v []map[string]interface{}) {
	o.Payments = v
}

// GetUpdateDealValue returns the UpdateDealValue field value if set, zero value otherwise.
func (o *AddRecurringSubscriptionRequest) GetUpdateDealValue() bool {
	if o == nil || IsNil(o.UpdateDealValue) {
		var ret bool
		return ret
	}
	return *o.UpdateDealValue
}

// GetUpdateDealValueOk returns a tuple with the UpdateDealValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddRecurringSubscriptionRequest) GetUpdateDealValueOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateDealValue) {
		return nil, false
	}
	return o.UpdateDealValue, true
}

// HasUpdateDealValue returns a boolean if a field has been set.
func (o *AddRecurringSubscriptionRequest) HasUpdateDealValue() bool {
	if o != nil && !IsNil(o.UpdateDealValue) {
		return true
	}

	return false
}

// SetUpdateDealValue gets a reference to the given bool and assigns it to the UpdateDealValue field.
func (o *AddRecurringSubscriptionRequest) SetUpdateDealValue(v bool) {
	o.UpdateDealValue = &v
}

func (o AddRecurringSubscriptionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddRecurringSubscriptionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deal_id"] = o.DealId
	toSerialize["currency"] = o.Currency
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["cadence_type"] = o.CadenceType
	if !IsNil(o.CyclesCount) {
		toSerialize["cycles_count"] = o.CyclesCount
	}
	toSerialize["cycle_amount"] = o.CycleAmount
	toSerialize["start_date"] = o.StartDate
	if !IsNil(o.Infinite) {
		toSerialize["infinite"] = o.Infinite
	}
	if !IsNil(o.Payments) {
		toSerialize["payments"] = o.Payments
	}
	if !IsNil(o.UpdateDealValue) {
		toSerialize["update_deal_value"] = o.UpdateDealValue
	}
	return toSerialize, nil
}

type NullableAddRecurringSubscriptionRequest struct {
	value *AddRecurringSubscriptionRequest
	isSet bool
}

func (v NullableAddRecurringSubscriptionRequest) Get() *AddRecurringSubscriptionRequest {
	return v.value
}

func (v *NullableAddRecurringSubscriptionRequest) Set(val *AddRecurringSubscriptionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddRecurringSubscriptionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddRecurringSubscriptionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddRecurringSubscriptionRequest(val *AddRecurringSubscriptionRequest) *NullableAddRecurringSubscriptionRequest {
	return &NullableAddRecurringSubscriptionRequest{value: val, isSet: true}
}

func (v NullableAddRecurringSubscriptionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddRecurringSubscriptionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


